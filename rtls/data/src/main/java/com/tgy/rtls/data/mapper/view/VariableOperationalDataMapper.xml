<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tgy.rtls.data.mapper.view.VariableOperationalDataMapper">
  <resultMap id="BaseResultMap" type="com.tgy.rtls.data.entity.view.VariableOperationalData">
    <!--@mbg.generated-->
    <!--@Table variable_operational_data-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="PlaceNavigationTotal" jdbcType="VARCHAR" property="placeNavigationTotal" />
    <result column="PlaceNavigationUseRate" jdbcType="VARCHAR" property="placeNavigationUseRate" />
    <result column="PlatformPlaceUtilizationRate" jdbcType="VARCHAR" property="platformPlaceUtilizationRate" />
    <result column="ReservationTotal" jdbcType="VARCHAR" property="reservationTotal" />
    <result column="ReverseCarSearchTotal" jdbcType="VARCHAR" property="reverseCarSearchTotal" />
    <result column="PlaceAvailabilityRate" jdbcType="VARCHAR" property="placeAvailabilityRate" />
    <result column="PerHourNullPlaceNumber" jdbcType="INTEGER" property="perHourNullPlaceNumber" />
    <result column="PlaceUseTotal" jdbcType="VARCHAR" property="placeUseTotal" />
    <result column="PlaceIdleTotalDuration" jdbcType="VARCHAR" property="placeIdleTotalDuration" />
    <result column="MapPlaceUtilizationRate" jdbcType="VARCHAR" property="mapPlaceUtilizationRate" />
    <result column="IdlePlaceNumber" jdbcType="INTEGER" property="idlePlaceNumber" />
    <result column="UserTotal" jdbcType="VARCHAR" property="userTotal" />
    <result column="UseFrequency" jdbcType="VARCHAR" property="useFrequency" />
    <result column="ActiveUserTotal" jdbcType="VARCHAR" property="activeUserTotal" />
    <result column="NewUsersNumber" jdbcType="INTEGER" property="newUsersNumber" />
    <result column="UserSearchTotal" jdbcType="VARCHAR" property="userSearchTotal" />
    <result column="LocationShareTotal" jdbcType="VARCHAR" property="locationShareTotal" />
    <result column="DetectorCount" jdbcType="VARCHAR" property="detectorCount" />
    <result column="SubCount" jdbcType="VARCHAR" property="subCount" />
    <result column="GatewayCount" jdbcType="VARCHAR" property="gatewayCount" />
    <result column="MonthlyActiveUsers" jdbcType="VARCHAR" property="monthlyActiveUsers" />
    <result column="Top10Business" jdbcType="VARCHAR" property="top10Business" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--@mbg.generated-->
    id, PlaceNavigationTotal, PlaceNavigationUseRate, PlatformPlaceUtilizationRate, ReservationTotal, 
    ReverseCarSearchTotal, PlaceAvailabilityRate, PerHourNullPlaceNumber, PlaceUseTotal, 
    PlaceIdleTotalDuration, MapPlaceUtilizationRate, IdlePlaceNumber, UserTotal, UseFrequency, 
    ActiveUserTotal, NewUsersNumber, UserSearchTotal, LocationShareTotal, DetectorCount, 
    SubCount, GatewayCount, MonthlyActiveUsers, Top10Business
  </sql>


  <select id="insertUsersTotal" statementType="CALLABLE">
    {call insertUsersTotal(#{year},#{month},#{numDays},#{numbers},#{map},#{visitCount})}
  </select>

  <select id="insertUserSearchTotal" statementType="CALLABLE">
    {call insertUserSearchTotal(#{year},#{month},#{numDays},#{numbers},#{map},#{result})}
  </select>

  <select id="insertTop10Business" statementType="CALLABLE">
    {call insertTop10Business(#{year},#{month},#{numDays},#{numbers},#{map},#{businessId})}
  </select>

  <select id="insertLocationShareTotal" statementType="CALLABLE">
    {call insertLocationShareTotal(#{year},#{month},#{numDays},#{numbers},#{map},#{result})}
  </select>

  <select id="insertPlaceUseTotal" statementType="CALLABLE">
    {call insertPlaceUseRecordTotal(#{year},#{month},#{numDays},#{numbers},#{hourDifference},#{map},#{placeId})}
  </select>

  <select id="insertPlaceNavigationTotal" statementType="CALLABLE">
    {call insertPlaceNavigationTotal(#{year},#{month},#{numDays},#{numbers},#{map},#{placeId},#{placeName})}
  </select>

  <select id="insertPlaceNavigationUseRate" statementType="CALLABLE">
    {call insertPlaceNavigationUseRate(#{year},#{month},#{numDays},#{numbers},#{map},#{placeId},#{placeName})}
  </select>

  <select id="insertReservationTotal" statementType="CALLABLE">
    {call insertReservationTotal(#{year},#{month},#{numDays},#{numbers},#{map},#{placeId},#{placeName},#{license},#{reservationPerson},#{phone})}
  </select>

  <select id="insertReverseCarSearchTotal" statementType="CALLABLE">
    {call insertReverseCarSearchTotal(#{year},#{month},#{numDays},#{numbers},#{map},#{placeId},#{placeName},#{userId})}
  </select>
  <select id="insertUserVisitCount" statementType="CALLABLE">
    {call insertUserVisitCount(#{year},#{month},#{numDays},#{numbers},#{map},#{userId})}
  </select>

  <select id="getVariableOperationalData" resultType="com.tgy.rtls.data.entity.view.ViewVo2">
  <choose>
    <when test='type == 1'>
      SELECT map, count(distinct userid) as `count` FROM map_monthactiveuserrecord WHERE is_fake_data=1 <if test='map != null'>AND map = #{map} </if> GROUP BY map
    </when>
    <when test='type == 2'>
      SELECT u.map,u.count as `count` FROM user_search_log u RIGHT JOIN user_search_log_time ut on u.id = ut.u_s_log_id  WHERE ut.is_fake_data=1 <if test='map != null'>AND map = #{map} </if> GROUP BY map
    </when>
    <when test='type == 3'>
      SELECT map, count(business_id) as `count` FROM each_map_search_business WHERE is_fake_data=1 <if test='map != null'>AND map = #{map} </if> GROUP BY map
    </when>
    <when test='type == 4'>
      SELECT l.map, l.count as `count` FROM location_sharing_log l RIGHT JOIN location_sharing_log_time lt on l.id = lt.l_s_log_id  WHERE lt.is_fake_data=1 <if test='map != null'>AND map = #{map} </if> GROUP BY map
    </when>
    <when test='type == 5'>
      SELECT map, count(place) as `count` FROM place_userecord WHERE is_fake_data=1 <if test='map != null'>AND map = #{map} </if> GROUP BY map
    </when>
    <when test='type == 6'>
      SELECT map, count(place) as `count` FROM user_active_select_place WHERE is_fake_data=1 <if test='map != null'>AND map = #{map} </if> GROUP BY map
    </when>
    <when test='type == 7'>
      SELECT map, count(place) as `count` FROM each_map_search_place WHERE is_fake_data=1 <if test='map != null'>AND map = #{map} </if> GROUP BY map
    </when>
    <when test='type == 8'>
      SELECT map, count(id) as `count` FROM vip_parking WHERE is_fake_data=1 <if test='map != null'>AND map = #{map} </if> GROUP BY map
    </when>
    <when test='type == 9'>
      SELECT map, count(place) as `count` FROM parking_info_statistics_findcar WHERE is_fake_data=1 <if test='map != null'>AND map = #{map} </if> GROUP BY map
    </when>
    <when test='type == 11'>
      SELECT map, count(userid) as `count` FROM map_monthactiveuserrecord WHERE is_fake_data=1 <if test='map != null'>AND map = #{map} </if> GROUP BY map
    </when>
    <when test='type == 12'>
      SELECT map, count(*) as `count` FROM place_userecord WHERE is_fake_data=1 <if test='map != null'>AND map = #{map} </if> GROUP BY map
    </when>
  </choose>
  </select>


  <select id="getDevices" resultType="com.tgy.rtls.data.entity.vo.DevicesVo">
    SELECT num,deviceType devicesType,networkstate devicesStatus,concat(power,'%')power FROM substation WHERE map = #{map}
    UNION ALL
    SELECT num,deviceType devicesType,networkstate devicesStatus,'' power FROM gateway_lora WHERE map = #{map}
    UNION ALL
    SELECT num,deviceType devicesType,networkstate AS devicesStatus,concat(power,'%')power FROM infrared WHERE map = #{map}
  </select>

  <select id="getDevicesTotal" resultType="com.tgy.rtls.data.entity.vo.DevicesVo">
    select
        (select count(*)  FROM substation WHERE map = #{map})totalBeacons,
        (select count(CASE networkstate WHEN '1' THEN '在线' END) from substation where map = #{map})onlineBeacons,
        (select count(CASE networkstate WHEN '0' THEN '离线' END) from substation where map = #{map})offlineBeacons,
        (select count(*) from substation where networkstate = 2 and map = #{map})lowBatteryBeacons,
        (select count(*) FROM infrared WHERE map = #{map})totalDetectors,
        (select count(CASE networkstate WHEN '1' THEN '在线' END) from infrared where map = #{map})onlineDetectors,
        (select count(CASE networkstate WHEN '0' THEN '离线' END) from infrared where map = #{map})offlineDetectors,
        (select count(*) from infrared where power &lt;=1 and map=#{map} and map is not null)lowBatteryDetectors,
        (select count(*) from gateway_lora where map=#{map}) totalGateways,
        (select count(CASE networkstate WHEN '1' THEN '在线' END) from gateway_lora where map=#{map})onlineGateways,
        (select count(CASE networkstate WHEN '0' THEN '离线' END) from gateway_lora where map=#{map})offlineGateways
    from dual
  </select>

  <select id="getIdleParkingNumbers" resultType="com.tgy.rtls.data.entity.vo.ParkingDataVo">
    <!--生成小时范围的临时表-->
    CREATE TEMPORARY TABLE HourRanges AS
    SELECT DATE_SUB(DATE_FORMAT(NOW(), '%Y-%m-%d %H:00:00'), INTERVAL a.i HOUR)       AS hourStart,
           DATE_SUB(DATE_FORMAT(NOW(), '%Y-%m-%d %H:00:00'), INTERVAL (a.i - 1) HOUR) AS hourEnd
    FROM
      (SELECT 0 AS i UNION ALL SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3
      UNION ALL SELECT 4 UNION ALL SELECT 5 UNION ALL SELECT 6 UNION ALL SELECT 7
      UNION ALL SELECT 8 UNION ALL SELECT 9 UNION ALL SELECT 10 UNION ALL SELECT 11
      UNION ALL SELECT 12 UNION ALL SELECT 13 UNION ALL SELECT 14 UNION ALL SELECT 15
      UNION ALL SELECT 16 UNION ALL SELECT 17 UNION ALL SELECT 18 UNION ALL SELECT 19
      UNION ALL SELECT 20 UNION ALL SELECT 21 UNION ALL SELECT 22 UNION ALL SELECT 23
      ) AS a;

    <!--计算总数-->
    CREATE TEMPORARY TABLE TotalCount AS
    SELECT COUNT(*) AS total_count
    FROM parking_place
           LEFT JOIN infrared
                     ON parking_place.id = infrared.place
                       AND #{map} != 178
    WHERE (#{map} = 178 AND parking_place.map = #{map})
       OR (#{map} != 178 AND parking_place.map = #{map} AND infrared.map = #{map});

    <!--计算每个小时段内的空闲停车位-->
    CREATE TEMPORARY TABLE NullPlaceNumbers AS
    SELECT hr.hourStart,
           hr.hourEnd,
           COUNT(DISTINCT pur.place) AS nullPlaceNumber
    FROM HourRanges hr
           LEFT JOIN
         place_userecord pur
         ON pur.start &lt; hr.hourEnd
           AND ((pur.map = #{map} AND pur.map = 178)
             OR (pur.map = #{map} AND pur.map != 178
               AND EXISTS (SELECT 1 FROM infrared inf WHERE inf.place = pur.place AND inf.map = #{map})))
    WHERE (pur.start > hr.hourStart AND pur.start &lt; hr.hourEnd)
       OR (pur.end > hr.hourStart AND pur.end &lt; hr.hourEnd)
       OR (pur.end IS NULL AND pur.start &lt; hr.hourEnd)
    GROUP BY hr.hourStart, hr.hourEnd;

    <!--查询最终结果-->
    SELECT hr.hourStart,
           hr.hourEnd,
           tc.total_count - IFNULL(np.nullPlaceNumber, 0) AS availableParkingSpots
    FROM HourRanges hr
           CROSS JOIN
         TotalCount tc
           LEFT JOIN
         NullPlaceNumbers np
         ON hr.hourStart = np.hourStart
           AND hr.hourEnd = np.hourEnd
    ORDER BY hr.hourStart;

    <!--清理临时表-->
    DROP TEMPORARY TABLE IF EXISTS HourRanges;
    DROP TEMPORARY TABLE IF EXISTS NullPlaceNumbers;
    DROP TEMPORARY TABLE IF EXISTS TotalCount;

  </select>

  <select id="getParkingTotal" resultType="com.tgy.rtls.data.entity.vo.ParkingDataVo">
    select
      (select count(*) from parking_place where map=#{map}) totalParkingSpots,
      IF(#{map} = 178,(select count(distinct id) from parking_place where map = #{map} and state = 0),
          (select count(distinct place) from infrared where map = #{map} and status = 0)) AS freeParkingSpots,
      IF(#{map} = 178, (select count(distinct id) from parking_place where map = #{map} and state = 1),
          (select count(distinct place) from infrared where map = #{map} and status = 1)) AS occupiedParkingSpots,
      (select count(CASE type WHEN '1' THEN '充电车位' END) from parking_place where map=#{map})  as chargingParkingSpots,
      (select count(CASE type WHEN '2' THEN '专用' END) from parking_place where map=#{map})    as dedicatedParkingSpots,
      (SELECT COUNT(*) FROM parking_place WHERE (carbittype = 1) and map=#{map}) as vipParkingSpots
    from dual
  </select>

  <select id="getParkingUsageData" resultType="com.tgy.rtls.data.entity.vo.ParkingUsageVo">
    SELECT
    pp.`NAME` AS parkingSpotNumber,
    <choose>
      <when test='start != null and end != null'>
        <!--@ignoreSql-->
        (TIMESTAMPDIFF(SECOND, #{start}, #{end}) - SUM(TIMESTAMPDIFF(SECOND, pur.start, IFNULL(pur.end, NOW())))) / 3600 AS idleDurationSeconds
      </when>
      <otherwise>
        (TIMESTAMPDIFF(SECOND, DATE_SUB(NOW(), INTERVAL #{time} MONTH), NOW()) - SUM(TIMESTAMPDIFF(SECOND, pur.start, IFNULL(pur.end, NOW())))) / 3600 AS `idleDurationSeconds`
      </otherwise>
    </choose>
    FROM parking_place pp
    LEFT JOIN place_userecord pur ON pp.id = pur.place
    AND (
    <choose>
      <when test='start != null and end != null'>
        (pur.start >= #{start} AND pur.start &lt;= #{end})
        OR (pur.end >= #{start} AND pur.end &lt;= #{end})
        OR (pur.start &lt;= #{start} AND pur.end >= #{end})
      </when>
      <otherwise>
        <!--@ignoreSql-->
        (pur.start >= DATE_SUB(NOW(), INTERVAL #{time} MONTH) AND pur.start &lt;= NOW())
        OR (pur.end >= DATE_SUB(NOW(), INTERVAL #{time} MONTH) AND pur.end &lt;= NOW())
        OR (pur.start &lt;= DATE_SUB(NOW(), INTERVAL #{time} MONTH) AND pur.end >= NOW())
      </otherwise>
    </choose>
    )
    WHERE pp.map = #{map}
    GROUP BY pp.id
    ORDER BY idleDurationSeconds DESC
  </select>

  <select id="getParkingUsageTotal" resultType="com.tgy.rtls.data.entity.vo.ParkingUsageVo">
    SELECT
    (
    SELECT SUM(total_count) AS totalParkingNavigations
    FROM (
    SELECT COUNT(*) AS total_count
    FROM user_active_select_place
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND addTime >= #{start} AND addTime &lt;= #{end}
      </when>
      <otherwise>
        AND addTime >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND addTime &lt;= NOW()
      </otherwise>
    </choose>
    UNION ALL
    SELECT COUNT(*) AS total_count
    FROM parking_info_statistics_recommend
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND start_time >= #{start} AND start_time &lt;= #{end}
      </when>
      <otherwise>
        AND start_time >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND start_time &lt;= NOW()
      </otherwise>
    </choose>
    ) AS total_counts
    ) totalParkingNavigations,

    (
    SELECT COUNT(*)
    FROM place_userecord
    WHERE map = #{map}
    AND (
    <choose>
      <when test="start != null and end != null">
        <!--@ignoreSql -->
        START >= #{start} AND START &lt;= #{end}
      </when>
      <otherwise>
        ((START>DATE_SUB(NOW(), INTERVAL #{time} MONTH) and START &lt; now() ) or (END>DATE_SUB(NOW(), INTERVAL #{time} MONTH) and START &lt; now() )or (END is null and START &lt; now()))
      </otherwise>
    </choose>
    )
    ) totalParkingUsages,

    (
    SELECT subquery.total_count / placeCount.total_count /
    <choose>
      <when test='start != null and end != null'>
        <!--@ignoreSql-->
        (TIMESTAMPDIFF(DAY, #{start}, #{end}))
      </when>
      <otherwise>
        (#{time}*30)
      </otherwise>
    </choose>
    AS parkingNavigationUsageRate
    FROM (
    SELECT SUM(total_count) AS total_count
    FROM (
    SELECT COUNT(*) AS total_count
    FROM user_active_select_place
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND addTime >= #{start} AND addTime &lt;= #{end}
      </when>
      <otherwise>
        AND addTime >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND addTime &lt;= NOW()
      </otherwise>
    </choose>
    UNION ALL
    SELECT COUNT(*) AS total_count
    FROM parking_info_statistics_recommend
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND start_time >= #{start} AND start_time &lt;= #{end}
      </when>
      <otherwise>
        AND start_time >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND start_time &lt;= NOW()
      </otherwise>
    </choose>
    ) AS subquery
    ) AS subquery,
    (SELECT COUNT(*) AS total_count FROM parking_place WHERE id IN (SELECT place FROM infrared) AND map = #{map}) AS placeCount
    ) parkingNavigationUsageRate,

    (
    SELECT (pu.total_count /
    IF(#{map} = 178, COUNT(*), (SELECT COUNT(*) FROM infrared WHERE map = #{map})) /
    <choose>
      <when test="start != null and end != null">
        <!--@ignoreSql-->
        DATEDIFF(#{end}, #{start})
      </when>
      <otherwise>
        DATEDIFF(NOW(), DATE_SUB(NOW(), INTERVAL #{time} MONTH))
      </otherwise>
    </choose>
    ) AS mapPlatformUtilizationRate
    FROM parking_place p
    JOIN (
    SELECT map, COUNT(*) AS total_count
    FROM place_userecord
    WHERE map = #{map}
    <choose>
      <when test="start != null and end != null">
        <!--@ignoreSql-->
         and `start` >= #{start} AND `start` &lt;= #{end}
      </when>
      <otherwise>
        and `start` >= DATE_SUB(NOW(), INTERVAL #{time} MONTH) AND `start` &lt;= NOW()
      </otherwise>
    </choose>
    GROUP BY map
    ) AS pu ON p.map = pu.map
    WHERE (#{map} = 178 OR id IN (SELECT place FROM infrared))
    AND p.map = #{map}
    GROUP BY p.map
    ORDER BY mapPlatformUtilizationRate DESC
    LIMIT 1
    ) AS mapPlatformUtilizationRate,

    (
    SELECT ((total_hours - occupied_hours) / total_hours) * 100 AS placeAvailabilityRate
    FROM (
    SELECT
    <choose>
      <when test="start != null and end != null">
        <!--@ignoreSql-->
        TIMESTAMPDIFF(HOUR, #{start}, #{end})
      </when>
      <otherwise>
        TIMESTAMPDIFF(HOUR, DATE_SUB(NOW(), INTERVAL #{time} MONTH), NOW())
      </otherwise>
    </choose> * COUNT(DISTINCT p.id) AS total_hours,
    COALESCE(SUM(
    CASE
    WHEN pu.start IS NOT NULL AND pu.end IS NULL THEN
    CASE
    WHEN pu.start &lt;
    <choose>
      <when test="start != null and end != null"><!--@ignoreSql-->#{start}</when>

      <otherwise>DATE_SUB(NOW(), INTERVAL #{time} MONTH)</otherwise>
    </choose>
    THEN TIMESTAMPDIFF(HOUR,
    <choose>
      <when test="start != null and end != null">
        <!--@ignoreSql-->
        #{start}, #{end}
      </when>
      <otherwise>
        DATE_SUB(NOW(), INTERVAL #{time} MONTH), NOW()
      </otherwise>
    </choose>
    )
    ELSE TIMESTAMPDIFF(HOUR, pu.start,
    <choose>
      <when test="start != null and end != null">#{end}</when>
      <otherwise><!--@ignoreSql-->NOW()</otherwise>
    </choose>
    )
    END
    WHEN pu.start IS NOT NULL AND pu.end IS NOT NULL THEN
    TIMESTAMPDIFF(HOUR,
    CASE
    WHEN pu.start >
    <choose>
      <when test="start != null and end != null"><!--@ignoreSql-->#{start}</when>
      <otherwise>DATE_SUB(NOW(), INTERVAL #{time} MONTH)</otherwise>
    </choose>
    THEN pu.start
    ELSE
    <choose>
      <when test="start != null and end != null"><!--@ignoreSql-->#{start}</when>
      <otherwise>DATE_SUB(NOW(), INTERVAL #{time} MONTH)</otherwise>
    </choose>
    END,
    CASE
    WHEN pu.end &lt;
    <choose>
      <when test="start != null and end != null"><!--@ignoreSql-->#{end}</when>
      <otherwise>NOW()</otherwise>
    </choose>
    THEN pu.end
    ELSE
    <choose>
      <when test="start != null and end != null"><!--@ignoreSql-->#{end}</when>
      <otherwise>NOW()</otherwise>
    </choose>
    END
    )
    ELSE 0
    END
    ), 0) AS occupied_hours
    FROM parking_place p
    LEFT JOIN infrared i ON p.id = i.place
    LEFT JOIN place_userecord pu ON p.id = pu.place
    AND ((pu.start IS NOT NULL AND pu.end IS NOT NULL AND pu.end > pu.start) OR (pu.start IS NOT NULL AND pu.end IS NULL))
    AND (pu.start >=
    <choose>
      <when test="start != null and end != null"><!--@ignoreSql-->#{start}</when>
      <otherwise>DATE_SUB(NOW(), INTERVAL #{time} MONTH)</otherwise>
    </choose>
    OR pu.end IS NULL)
    AND pu.start &lt;=
    <choose>
      <when test="start != null and end != null"><!--@ignoreSql-->#{end}</when>
      <otherwise>NOW()</otherwise>
    </choose>
    WHERE i.map IS NOT NULL AND p.map = #{map}
    ) AS subquery
    ) parkingLotIdleRate
    FROM dual
  </select>

  <delete id="deleteBatchByIds">
    delete
    from place_userecord
    where id in
    <foreach collection="ids" item="id" index="index" open="(" close=")" separator=",">
      #{id}
    </foreach>;
  </delete>

  <select id="getParkingNavigationTotal" resultType="com.tgy.rtls.data.entity.vo.ParkingUsageVo">
    SELECT
    (SELECT p.name FROM parking_place p WHERE combined.place = p.id) parkingSpotNumber,
    COUNT(*) AS navigationCount
    FROM (
    SELECT map, place
    FROM parking_info_statistics_recommend
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND start_time >= #{start}
        AND start_time &lt;= #{end}
      </when>
      <otherwise>
        AND start_time >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND start_time &lt;= NOW()
      </otherwise>
    </choose>
    UNION ALL
    SELECT map, place
    FROM user_active_select_place
    WHERE dest_id IS NULL
    AND map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND addTime >= #{start}
        AND addTime &lt;= #{end}
      </when>
      <otherwise>
        AND addTime >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND addTime &lt;= NOW()
      </otherwise>
    </choose>
    ) AS combined
    GROUP BY combined.map, combined.place
  </select>
  <select id="getParkingUseTotal" resultType="com.tgy.rtls.data.entity.vo.ParkingUsageVo">
    SELECT
    (SELECT p.name FROM parking_place p WHERE p.id = u.place) parkingSpotNumber,
    COUNT(*) usageCount
    FROM place_userecord u
    WHERE map = #{map}
    AND (
    <choose>
      <when test='start != null and end != null'>
        (START >= #{start} AND START &lt;= #{end})
        OR (END >= #{start} AND START &lt;= #{end})
        OR (END IS NULL AND START &lt;= #{end})
      </when>
      <otherwise>
        <!--@ignoreSql-->
        (START >= DATE_SUB(NOW(), INTERVAL #{time} MONTH) AND START &lt; NOW())
        OR (END >= DATE_SUB(NOW(), INTERVAL #{time} MONTH) AND START &lt; NOW())
        OR (END IS NULL AND START &lt; NOW())
      </otherwise>
    </choose>
    )
    GROUP BY parkingSpotNumber
    ORDER BY usageCount DESC
  </select>

  <select id="getUserStatistics" resultType="com.tgy.rtls.data.entity.vo.UserStatisticsVo">
    SELECT DISTINCT userid as userId,DATE_FORMAT(loginTime, '%Y-%m-%d %H:%i') as createTime
    FROM map_monthactiveuserrecord
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND loginTime >= #{start}
        AND loginTime &lt;= #{end}
      </when>
      <otherwise>
        AND loginTime >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND loginTime &lt;= NOW()
      </otherwise>
    </choose>
    GROUP BY userId
  </select>

  <select id="getActiveUserCount" resultType="com.tgy.rtls.data.entity.vo.UserStatisticsVo">
    SELECT COUNT(DISTINCT userid) AS activeUserCount, DATE_FORMAT(loginTime, '%Y-%m') AS time
    FROM map_monthactiveuserrecord
    WHERE map = #{map}
      <choose>
        <when test='start != null and end != null'>
          AND loginTime >= #{start}
          AND loginTime &lt;= #{end}
        </when>
        <otherwise>
          AND loginTime >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
          AND loginTime &lt;= NOW()
        </otherwise>
      </choose>
    GROUP BY time
  </select>

  <select id="getTotalUserCount" resultType="java.lang.Integer">
    SELECT COUNT(DISTINCT userid)
    FROM map_monthactiveuserrecord
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND loginTime >= #{start}
        AND loginTime &lt;= #{end}
      </when>
      <otherwise>
        AND loginTime >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND loginTime &lt;= NOW()
      </otherwise>
    </choose>
  </select>

  <select id="getNewUserCount" resultType="com.tgy.rtls.data.entity.view.UserVo">
    SELECT userid userIds, loginTime loginTimes
    FROM map_monthactiveuserrecord
    WHERE 1=1
    <if test='map != null'>
      AND map = #{map}
    </if>
    <choose>
      <when test='start != null and end != null'>
        AND loginTime >= #{start}
        AND loginTime &lt;= #{end}
      </when>
      <otherwise>
        <if test='time != null'>
          AND loginTime >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
          AND loginTime &lt;= NOW()
        </if>
      </otherwise>
    </choose>
  </select>

  <select id="getTotalVisitCount" resultType="java.lang.Integer">
    SELECT COUNT(userid)
    FROM map_monthactiveuserrecord
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND loginTime >= #{start}
        AND loginTime &lt;= #{end}
      </when>
      <otherwise>
        AND loginTime >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND loginTime &lt;= NOW()
      </otherwise>
    </choose>
  </select>

  <select id="getTotalActiveUserCount" resultType="java.lang.Integer">
    SELECT COUNT(DISTINCT userid) AS activeUsers
    FROM map_monthactiveuserrecord
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND loginTime >= #{start}
        AND loginTime &lt;= #{end}
      </when>
      <otherwise>
        AND loginTime >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND loginTime &lt;= NOW()
      </otherwise>
    </choose>
  </select>

  <select id="getTotalUserSearchCount" resultType="java.lang.Integer">
    SELECT COUNT(uslt.u_s_log_id) userSearchTotal
    FROM user_search_log usl
    LEFT JOIN user_search_log_time uslt ON usl.id = uslt.u_s_log_id
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND uslt.time >= #{start}
        AND uslt.time &lt;= #{end}
      </when>
      <otherwise>
        AND uslt.time >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND uslt.time &lt;= NOW()
      </otherwise>
    </choose>
  </select>

  <select id="getTotalShareCount" resultType="java.lang.Integer">
    SELECT COUNT(lslt.l_s_log_id) locationShareTotal
    FROM location_sharing_log lsl
    LEFT JOIN location_sharing_log_time lslt ON lsl.id = lslt.l_s_log_id
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND lslt.time >= #{start}
        AND lslt.time &lt;= #{end}
      </when>
      <otherwise>
        AND lslt.time >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND lslt.time &lt;= NOW()
      </otherwise>
    </choose>
  </select>

  <select id="getParkingReservation" resultType="com.tgy.rtls.data.entity.vo.ParkingReservationVo">
    SELECT
    pp.name parkingSpotNumber,
    v.license licensePlateNumber,
    v.reservation_person reserved,
    v.phone phoneNumber,
    v.start_time reservationStartTime,
    v.end_time reservationEndTime,
    pp.state parkingStatus,
    v.userid as `userId`,
    v.status as `status`,
    v.source as `source`
    FROM vip_parking v
    left JOIN parking_place pp ON pp.id=v.place
    WHERE v.map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND v.create_time >= #{start}
        AND v.create_time &lt;= #{end}
      </when>
      <otherwise>
        AND v.create_time >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND v.create_time &lt;= NOW()
      </otherwise>
    </choose>
  </select>

  <select id="getParkingReservationTotal" resultType="com.tgy.rtls.data.entity.vo.ParkingReservationVo">
    SELECT COUNT(*) totalReservations
    FROM vip_parking
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND create_time >= #{start}
        AND create_time &lt;= #{end}
      </when>
      <otherwise>
        AND create_time >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND create_time &lt;= NOW()
      </otherwise>
    </choose>
  </select>

  <select id="getReverseCarSearchData" resultType="com.tgy.rtls.data.entity.vo.ReverseCarSearchVo">
    SELECT
    user_id userId,
    COUNT(user_id) reverseCarSearchCount
    FROM parking_info_statistics_findcar
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND start_time >= #{start}
        AND start_time &lt;= #{end}
      </when>
      <otherwise>
        AND start_time >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND start_time &lt;= NOW()
      </otherwise>
    </choose>
    GROUP BY user_id
  </select>

  <select id="getReverseCarSearchTotal" resultType="com.tgy.rtls.data.entity.vo.ReverseCarSearchVo">
    SELECT COUNT(*) totalReverseCarSearches
    FROM parking_info_statistics_findcar
    WHERE map = #{map}
    <choose>
      <when test='start != null and end != null'>
        AND start_time >= #{start}
        AND start_time &lt;= #{end}
      </when>
      <otherwise>
        AND start_time >= DATE_SUB(NOW(), INTERVAL #{time} MONTH)
        AND start_time &lt;= NOW()
      </otherwise>
    </choose>
  </select>

  <select id="getParkingData" resultType="com.tgy.rtls.data.entity.vo.ParkingDataVo">
    SELECT
      p.name parkingSpotNumber,
      c.name `company`,
      p.state parkingStatus,
      p.type parkingType,
      p.carbittype vip,
      p.config_way configurationMethod,
      p.charge chargingStatus
    FROM parking_place p
    LEFT JOIN parking_company c ON p.company = c.id
    WHERE p.map = #{map}
  </select>
</mapper>