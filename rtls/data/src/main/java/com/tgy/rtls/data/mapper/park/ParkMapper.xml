<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tgy.rtls.data.mapper.park.ParkMapper">
    <resultMap id="MapPlace" type="com.tgy.rtls.data.entity.park.MapPlace">
        <id property="id" column="id"/>
        <result column="mapName" property="mapName"/>
        <result column="describe" property="describe"/>
        <result column="lng" property="lng"/>
        <result column="lat" property="lat"/>
        <result column="total" property="total"/>
        <result column="empty" property="empty"/>
        <result column="mapLogo" property="mapLogo"/>
        <result column="mapLogolocal" property="mapLogolocal"/>
        <result column="coordinate" property="coordinate"/>
        <result column="cost" property="cost"/>
        <result column="desc" property="desc"/>
        <result column="evaluate" property="evaluate"/>
        <result column="companyCount" property="companyCount"/>
<!--        <result column="name" property="name"/>-->
<!--        <result column="x" property="x"/>-->
<!--        <result column="y" property="y"/>-->
<!--        <result column="z" property="z"/>-->
<!--        <result column="fid" property="fid"/>-->
<!--        <result column="floor" property="floor"/>-->
<!--        <result column="state" property="state"/>-->
<!--        <result column="carbittype" property="carbittype"/>-->
    </resultMap>

    <resultMap id="CompanyPlace" type="com.tgy.rtls.data.entity.park.CompanyPlace">
        <id property="id" column="id"/>
        <result column="companyName" property="companyName"/>
        <result column="total" property="total"/>
        <result column="empty" property="empty"/>
        <collection property="places" javaType="java.util.List" ofType="com.tgy.rtls.data.entity.park.ParkingPlaceDTO">
            <id column="place_id" jdbcType="INTEGER" property="id"/>
            <result column="place_name" property="name"/>
            <result column="x" property="x"/>
            <result column="y" property="y"/>
            <result column="floor" property="floor"/>
            <result column="type" property="type"/>
            <result column="fid" property="fid"/>
            <result column="state" property="state"/>
            <result column="carbittype" property="carbittype"/>
        </collection>
    </resultMap>

    <resultMap id="listComName" type="com.tgy.rtls.data.entity.park.ParkingCompanyVo">
        <result property="mapId" column="mapId"/>
        <result property="mapName" column="mapName"/>
        <collection property="comNameList" ofType="com.tgy.rtls.data.entity.park.ParkingCompanyVo">
            <result property="comId" column="comId"/>
            <result property="comName" column="comName"/>
        </collection>
    </resultMap>

    <select id="findPlaceCountGroupByMap" resultMap="MapPlace">
        select distinct (map_2d.id) as `id`,
                        map_2d.name                                                              as mapName,
                        map_2d.lng,
                        map_2d.lat,
                        map_2d.map_logo mapLogo,
                        map_2d.map_logolocal mapLogolocal,
                        map_2d.coordinate `coordinate`,
        plc.cost,plc.`desc`,plc.evaluate,
                        (select count(*) from parking_place where parking_place.map = map_2d.id) as total,
        (select count(*) from parking_place where parking_place.state = 0 and parking_place.instanceid is null AND parking_place.map = map_2d.id
            <if test="mapId != null">
                and parking_place.map = #{mapId}
            </if>
            <if test="hasVIP != null and hasVIP == 1"> and parking_place.carbittype = #{hasVIP}</if>
            <if test="placeType != null">
                and parking_place.carbittype = #{placeType}
            </if>
        ) as `empty`,
        (select count(*) from parking_place where parking_place.state = 0 and parking_place.instanceid is null AND parking_place.map = map_2d.id
        <if test="placeType != null">and parking_place.carbittype=#{placeType}</if> and parking_place.company is not null <if test="hasVIP != null and hasVIP == 1"> and parking_place.carbittype = #{hasVIP}</if>) as companyCount,
        (IF(EXISTS (SELECT 1 FROM parking_place WHERE parking_place.map = map_2d.id AND parking_place.carbittype = 1 AND parking_place.state = 0), '1', '0')) AS hasVIP,
        (select count(is_reservable) from parking_place where map=map_2d.id and carbittype = 1 AND state = 0 and is_reservable=1)isReservableCount
        from map_2d
        left join parking_lot_cost plc on map_2d.id = plc.map
        left join parking_place pp on map_2d.id = pp.map
        where 1=1
        <if test="enable != null">
            and map_2d.enable=#{enable}
        </if>
        <if test="placeType != null">
            and pp.carbittype=#{placeType} and pp.is_reservable=1
        </if>
        <if test="mapId != null">
            and map_2d.id=#{mapId}
        </if>
    </select>

    <select id="findPlaceCountByCompany" resultMap="CompanyPlace">
        SELECT distinct
        IF(parking_company.id IS NULL, 0, parking_company.id) AS id,
        IF(parking_company.name IS NULL, '其他车位', parking_company.name) AS companyName,
        IF(parking_place.company IS NULL, (SELECT COUNT(gg.id) FROM parking_place gg WHERE gg.company IS NULL), (SELECT COUNT(gg.id) FROM parking_place gg WHERE gg.company = parking_company.id)) AS total,
        IF(parking_place.company IS NULL, (SELECT COUNT(gg.id) FROM parking_place gg WHERE gg.company IS NULL <if test="status != null and status != ''">and gg.state = #{status} </if>
                                            <if test="type != null"> AND gg.carbittype = #{type} </if> <if test="map != null"> AND gg.map = #{map} </if>),
                                            (SELECT COUNT(gg.id) FROM parking_place gg WHERE gg.state = 0 AND gg.company = parking_company.id
                                                    <if test="type != null"> AND gg.carbittype = #{type} </if>
                                                    <if test="map != null"> AND gg.map = #{map} </if>)
        ) AS `empty`,

        parking_place.id AS place_id,
        parking_place.name AS place_name,
        parking_place.x,
        parking_place.y,
        parking_place.floor,
        parking_place.type,
        parking_place.fid,
        parking_place.state,
        parking_place.carbittype,
        parking_company.name
        FROM parking_place
        LEFT JOIN parking_company ON parking_company.id = parking_place.company
        WHERE 1=1
        <if test="type != null">
            AND parking_place.carbittype = #{type}
        </if>
        <if test="status != null and status != ''">
            AND parking_place.state = #{status}
        </if>
        <if test="map != null">
            AND parking_place.map = #{map}
        </if>
        <if test="companyName != null and companyName != ''">
            AND parking_place.name LIKE CONCAT('%', #{companyName}, '%')
        </if>
        ORDER BY parking_company.name DESC
    </select>

    <select id="findPlaceCountByCompanyContainPlaceList" resultMap="CompanyPlace">
        SELECT CASE WHEN parking_company.id IS NULL THEN '0' ELSE parking_company.id END AS id,
               CASE
                   WHEN parking_company.name IS NULL THEN '其他车位'
                   ELSE parking_company.name END                                         AS companyName,
               (CASE
                    WHEN parking_place.company IS NULL THEN (SELECT COUNT(gg.id)
                                                             FROM parking_place gg
                                                             WHERE gg.company IS NULL)
                    ELSE (SELECT COUNT(gg.id)
                          FROM parking_place gg
                          WHERE gg.company = parking_company.id) END)                    AS total,
               (CASE
                    WHEN parking_place.company IS NULL THEN (SELECT COUNT(gg.id)
                                                             FROM parking_place gg
                                                             WHERE gg.state = 0
                                                               AND gg.company IS NULL)
                    ELSE (SELECT COUNT(gg.id)
                          FROM parking_place gg
                          WHERE gg.state = 0
                            AND gg.company = parking_company.id) END) AS
        `empty` ,
        parking_company.x as company_x,
        parking_company.y as company_y,
        parking_company.floor as company_floor,
        parking_company.name as ccname,
        parking_place.id as place_id,parking_place.name as
        place_name,parking_place.x,parking_place.y,parking_place.floor,
        parking_place.type,parking_place.fid,parking_place.z,parking_place.state
        from parking_place left join parking_company
        on parking_company.id=parking_place.company
        where 1=1
        <if test="map != null">
            and parking_place.map=#{map}
        </if>
        <if test="companyName != null and companyName != ''">
            and parking_company.name like concat('%'
              , #{companyName}
              , '%')
        </if>
        ORDER BY parking_company.name DESC
    </select>


    <select id="findByFloorPlace" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        select id as place_id, name as place_name, x, y, floor
        from parking_place where 1 = 1
        <if test="map != null">
            and map = #{map}
        </if>
    </select>

    <!--$var pageIndex=1-->
    <!--$var pageSize=1-->
    <select id="findByAllCompany" resultType="com.tgy.rtls.data.entity.park.ParkingCompany">
        select *,
               (SELECT GROUP_CONCAT(NAME SEPARATOR ',')
                FROM parking_place
                WHERE parking_place.company = parking_company.id) AS places
        from parking_company where 1 = 1
        <if test="name != null and name != ''">
            and name like concat('%', #{name}, '%')
        </if>
        <if test="instanceid != null and instanceid != ''">
            and instanceid = #{instanceid}
        </if>
        <if test="id != null and id != ''">
            and id = #{id}
        </if>
        <if test="map != null and map != ''">
            and map = #{map}
        </if>
        <if test="pageIndex != null">
            limit ${pageIndex}, ${pageSize}
        </if>
    </select>


    <!--$var pageIndex=1-->
    <!--$var pageSize=1-->
    <select id="findByAllPlace" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        SELECT parking_place.id,parking_place.`name`,parking_place.x,parking_place.y,parking_place.z,parking_place.`map`,parking_place.config_way,
        parking_place.company,parking_place.elevator_id,parking_place.`floor`,parking_place.license,
        parking_place.fid,parking_place.carbittype,parking_place.`type`,parking_place.charge,parking_place.third_party_update_time,
        parking_place.addTime,parking_place.updateTime,parking_place.detection_exception,parking_place.exception_time,parking_place.state,parking_place.is_reservable,
<!--        IF( f.place IS NOT NULL, IF(f.floor_lock_state = 1, 0, IF(f.floor_lock_state = 0, 1, parking_place.`state`) ),-->
<!--        parking_place.`state`  &#45;&#45; 如果没有关联的 floor_lock 记录，使用原始的 parking_place.state 值-->
<!--        ) AS `state`,-->
               m.mapKey,
               m.appName,
               m.fmapID,
               m.themeImg,
               (select GROUP_CONCAT(distinct parking_place.type order by type SEPARATOR ',')
                from parking_place
                order by type)                                                      as parkingType,
               parking_company.name                                                 AS companyName,
               parking_company.`user`                                               AS `user`,
               (SELECT map_2d.name FROM map_2d WHERE map_2d.id = parking_place.map) AS mapName,
        (SELECT peb.building FROM parking_elevator_binding peb WHERE peb.id = parking_place.elevator_id) AS building,
        (SELECT peb.floor FROM parking_elevator_binding peb WHERE peb.id = parking_place.elevator_id) AS elevatorFloor,
        (SELECT peb.name FROM parking_elevator_binding peb WHERE peb.id = parking_place.elevator_id) AS elevatorName
        FROM parking_place
                 left join parking_company on parking_place.`company` = parking_company.`id`
                 left join map_2d m on parking_place.map = m.id
<!--        LEFT JOIN floor_lock f ON f.place = parking_place.id-->
        <where>
            <if test="id != null and id != ''">
                and parking_place.id = #{id}
            </if>
            <if test="companyName != null and companyName != ''">
                and parking_company.name like concat('%', #{companyName}, '%')
            </if>
            <if test="name != null and name != ''">
                and parking_place.name like concat('%', #{name}, '%')
            </if>
            <if test="instanceid != null and instanceid != ''">
                and parking_place.instanceid = #{instanceid}
            </if>
            <if test="license != null and license != ''">
                and parking_place.license like concat('%', #{license}, '%')
            </if>
            <if test="company != null and company != ''">
                and parking_place.company = #{company}
            </if>
            <if test="phone != null and phone != ''">
                and parking_company.phone = #{phone}
            </if>
            <if test="state != null">
                and parking_place.state = #{state}
            </if>
            <if test="map != null">
                and parking_place.map = #{map}
            </if>
            <if test="floor != null">
                and parking_place.floor = #{floor}
            </if>
            <if test="fid != null">
                and parking_place.fid = #{fid}
            </if>
            <if test="type != null">
                and parking_place.type = #{type}
            </if>
            <if test="charge != null">
                and parking_place.charge = #{charge}
            </if>
            order by parking_place.name
            <if test="pageIndex != null">
                limit ${pageIndex},${pageSize}
            </if>
        </where>
    </select>
    <!--$var desc=m-->
    <select id="findByAllPlace2" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        SELECT parking_place.id,parking_place.`name`,parking_place.x,parking_place.y,parking_place.z,parking_place.`map`,parking_place.config_way,
        parking_place.company,parking_place.elevator_id,parking_place.`floor`,parking_place.license,
        parking_place.fid,parking_place.carbittype,parking_place.`type`,parking_place.charge,parking_place.third_party_update_time,
        parking_place.addTime,parking_place.updateTime,parking_place.detection_exception,parking_place.exception_time,parking_place.state,parking_place.is_reservable,
<!--        IF( f.place IS NOT NULL, IF(f.floor_lock_state = 1, 0, IF(f.floor_lock_state = 0, 1, parking_place.`state`) ),-->
<!--        parking_place.`state`  &#45;&#45; 如果没有关联的 floor_lock 记录，使用原始的 parking_place.state 值-->
<!--        ) AS `state`,-->
        mrf.name floorName,
               m.mapKey,
               m.appName,
               m.fmapID,
               m.mapImg,
               m.themeImg,
               parking_company.name                                                 AS companyName,
               parking_company.`user`                                               AS `user`,
               (SELECT map_2d.name FROM map_2d WHERE map_2d.id = parking_place.map) AS mapName,
               (SELECT peb.building FROM parking_elevator_binding peb WHERE peb.id = parking_place.elevator_id) AS building,
               (SELECT peb.floor FROM parking_elevator_binding peb WHERE peb.id = parking_place.elevator_id) AS elevatorFloor,
               (SELECT peb.name FROM parking_elevator_binding peb WHERE peb.id = parking_place.elevator_id) AS elevatorName
        FROM parking_place
<!--            LEFT JOIN floor_lock f ON f.place = parking_place.id-->
        left join parking_company on parking_place.`company` = parking_company.`id`
                 left join map_2d m on m.id = parking_place.map
        left join map_relevance_floor mrf on mrf.map = m.id AND mrf.level = parking_place.floor
        WHERE 1 = 1 and parking_place.name != 'lrr0112'
        <if test="id != null and id != ''">
            and parking_place.id = #{id}
        </if>
        <if test="maps != '' and maps != null">
            and m.id in
            <foreach collection="maps" open="(" close=")" separator="," item="maps">
                #{maps}
            </foreach>
        </if>
        <if test="isReservable != null and isReservable != ''">
            and is_reservable=#{isReservable}
        </if>
        <if test="floorName != null and floorName != ''">
            and mrf.name like concat('%',#{floorName},'%')
        </if>
        <if test="configWay != null and configWay != ''">
            and parking_place.config_way = #{configWay}
        </if>
<!--        <if test="reserve != null and reserve != ''">-->
<!--            <if test="company == null">-->
<!--                and company is null-->
<!--            </if>-->
<!--        </if>-->
        <if test="carbitType != null and carbitType != ''">
            and (carbittype = #{carbitType} or parking_place.type = 7)
        </if>
        <if test="companyName != null and companyName != ''">
            and parking_company.name like concat('%', #{companyName}, '%')
        </if>
        <if test="name != null and name != ''">
            and parking_place.name like concat('%', #{name}, '%')
        </if>
        <if test="license != null and license != ''">
            and parking_place.license like concat('%', #{license}, '%')
        </if>
        <if test="company != null and company != ''">
            and parking_place.company = #{company}
        </if>
        <if test="state != null">
            and parking_place.state = #{state}
        </if>
        <if test="map != null">
            and parking_place.map = #{map}
        </if>
        <if test="floor != null">
            and parking_place.floor = #{floor}
        </if>
        <if test="fid != null">
            and parking_place.fid = #{fid}
        </if>
        <if test="type != null">
            and parking_place.type = #{type}
        </if>
        <if test="charge != null">
            and parking_place.charge = #{charge} and parking_place.type = 1
        </if>
        <if test="desc != null and desc != ''">
            order by ${desc}
        </if>
    </select>

    <!--$var pageIndex=1-->
    <!--$var pageSize=1-->
    <select id="findByAllCompanyName" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        SELECT parking_place.*,
               parking_company.name                                                 AS companyName,
               (SELECT map_2d.name FROM map_2d WHERE map_2d.id = parking_place.map) AS mapName
        FROM parking_place
                 left join parking_company on parking_place.`company` = parking_company.`id` WHERE 1 = 1
        <if test="id != null and id != ''">
            and parking_place.id = #{id}
        </if>
        <if test="companyName != null and companyName != ''">
            and parking_company.name like concat('%', #{companyName}, '%')
        </if>
        <if test="name != null and name != ''">
            and parking_place.name like concat('%', #{name}, '%')
        </if>
        <if test="instanceid != null and instanceid != ''">
            and parking_place.instanceid = #{instanceid}
        </if>
        <if test="license != null and license != ''">
            and parking_place.license like concat('%', #{license}, '%')
        </if>
        <if test="company != null and company != ''">
            and parking_place.company = #{company}
        </if>
        <if test="state != null">
            and parking_place.state = #{state}
        </if>
        <if test="map != null">
            and parking_place.map = #{map}
        </if>
        <if test="floor != null">
            and parking_place.floor = #{floor}
        </if>
        <if test="fid != null">
            and parking_place.fid = #{fid}
        </if>
        <if test="type != null">
            and parking_place.type = #{type}
        </if>
        <if test="charge != null">
            and parking_place.charge = #{charge}
        </if>
        and parking_place.state = 0
        <if test="pageIndex != null">
            limit ${pageIndex},${pageSize}
        </if>
        /* GROUP BY parking_place.company*/
    </select>

    <select id="wechatFindByAllCompanyName" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        SELECT parking_place.*,
               parking_company.name                                                 AS companyName,
               (SELECT map_2d.name FROM map_2d WHERE map_2d.id = parking_place.map) AS mapName
        FROM parking_place
                 left join parking_company on parking_place.`company` = parking_company.`id` WHERE 1 = 1
        <if test="company != null and company != ''">
            and parking_place.company is null
        </if>
        <if test="instanceid != null and instanceid != ''">
            and parking_place.instanceid = #{instanceid}
        </if>
        <if test="map != null">
            and parking_place.map = #{map}
        </if>
        <if test="floor != null">
            and parking_place.floor = #{floor}
        </if>
        and parking_place.state = 0
        order by parking_place.name asc
        /* GROUP BY parking_place.company*/
    </select>

    <insert id="addCompany" keyProperty="id" useGeneratedKeys="true">
        insert into parking_company(name, instanceid, user, phone, pwd, map, x, y, floor, fid, addTime)
            value (
                   #{parkingCompany.name}, #{parkingCompany.instanceid}, #{parkingCompany.user},
                   #{parkingCompany.phone}, #{parkingCompany.pwd}, #{parkingCompany.map},
                   #{parkingCompany.x}, #{parkingCompany.y}, #{parkingCompany.floor},
                   #{parkingCompany.fid}, #{parkingCompany.addTime})
    </insert>

    <insert id="addPlace" keyProperty="id" useGeneratedKeys="true">
        insert into parking_place (name, x, y, z, map, company, floor, state, license, instanceid, fid, type,elevator_id,config_way,is_reservable)
            value (#{parkingPlace.name},
                   #{parkingPlace.x},
                   #{parkingPlace.y},
                   #{parkingPlace.z},
                   #{parkingPlace.map},
                   #{parkingPlace.company},
                   #{parkingPlace.floor},
                   #{parkingPlace.state},
                   #{parkingPlace.license},
                   #{parkingPlace.instanceid},
                   #{parkingPlace.fid},
                   #{parkingPlace.type},
                   #{parkingPlace.elevatorId},
                   #{parkingPlace.configWay},
                   #{parkingPlace.isReservable}
            )
    </insert>

    <update id="updateCompany">
        update parking_company
        <set>
            name=#{parkingCompany.name},
            <if test="parkingCompany.pwd != null and parkingCompany.pwd != ''">
                pwd= #{parkingCompany.pwd},
            </if>
            <if test="parkingCompany.user != null and parkingCompany.user != ''">
                user= #{parkingCompany.user},
            </if>
            <if test="parkingCompany.phone != null and parkingCompany.phone != ''">
                phone= #{parkingCompany.phone},
            </if>
            <if test="parkingCompany.map != null and parkingCompany.map != ''">
                map= #{parkingCompany.map},
            </if>
            x= #{parkingCompany.x},
            y= #{parkingCompany.y},
            <if test="parkingCompany.floor != null and parkingCompany.floor != ''">
                floor= #{parkingCompany.floor},
            </if>
            <if test="parkingCompany.fid != null and parkingCompany.fid != ''">
                fid= #{parkingCompany.fid}
            </if>
        </set>

        where id = #{parkingCompany.id}
    </update>


    <update id="updatePlaceCompany">
        update parking_place
        <set>
            <if test="parkingPlace.name != null and parkingPlace.name != ''">
                name=#{parkingPlace.name},
            </if>
            <if test="parkingPlace.x != null">
                x=#{parkingPlace.x},
            </if>
            <if test="parkingPlace.y != null">
                y=#{parkingPlace.y},
            </if>
            <if test="parkingPlace.z != null">
                z=#{parkingPlace.z},
            </if>
            <if test="parkingPlace.map != null">
                map=#{parkingPlace.map},
            </if>
                company=#{parkingPlace.company},

            <if test="parkingPlace.floor != null">
                floor=#{parkingPlace.floor},
            </if>
            <if test="parkingPlace.state != null">
                state=#{parkingPlace.state},
            </if>
            <if test="parkingPlace.fid != null">
                fid=#{parkingPlace.fid},
            </if>
            <if test="parkingPlace.license != null">
                license=#{parkingPlace.license},
            </if>
            <if test="parkingPlace.updateTime != null">
                updateTime=#{parkingPlace.updateTime},
            </if>
            <if test="parkingPlace.type != null">
                type=#{parkingPlace.type},
            </if>
            <if test="parkingPlace.carbittype != null and parkingPlace.carbittype != ''">
                carbittype=#{parkingPlace.carbittype},
            </if>
                elevator_id=#{parkingPlace.elevatorId},
                config_way=#{parkingPlace.configWay},
                is_reservable=#{parkingPlace.isReservable}
        </set>
        where id = #{parkingPlace.id}
    </update>
    <update id="updatePlace">
        update parking_place
        <set>
            <if test="parkingPlace.name != null and parkingPlace.name != ''">
                name=#{parkingPlace.name},
            </if>
            <if test="parkingPlace.x != null">
                x=#{parkingPlace.x},
            </if>
            <if test="parkingPlace.y != null">
                y=#{parkingPlace.y},
            </if>
            <if test="parkingPlace.z != null">
                z=#{parkingPlace.z},
            </if>
            <if test="parkingPlace.map != null">
                map=#{parkingPlace.map},
            </if>
            <if test="parkingPlace.company != null">
                company=#{parkingPlace.company},
            </if>
            <if test="parkingPlace.floor != null">
                floor=#{parkingPlace.floor},
            </if>
            <if test="parkingPlace.state != null">
                state=#{parkingPlace.state},
            </if>
            <if test="parkingPlace.fid != null">
                fid=#{parkingPlace.fid},
            </if>
            <if test="parkingPlace.type != null">
                type=#{parkingPlace.type},
            </if>
            <if test="parkingPlace.license != null">
                license=#{parkingPlace.license},
            </if>
            <if test="parkingPlace.addTime != null">
                addTime=#{parkingPlace.addTime},
            </if>
            <if test="parkingPlace.updateTime != null">
                updateTime=#{parkingPlace.updateTime}
            </if>
        </set>
        where id = #{parkingPlace.id}
    </update>

    <update id="updatePlace2">
        update parking_place
        <set>
            <if test="parkingPlace.name != null and parkingPlace.name != ''">
                name=#{parkingPlace.name},
            </if>

            <if test="parkingPlace.map != null">
                map=#{parkingPlace.map},
            </if>

            <if test="parkingPlace.state != null">
                state=#{parkingPlace.state},
            </if>

            <if test="parkingPlace.license != null">
                license=#{parkingPlace.license},
            </if>

            <if test="parkingPlace.updateTime != null">
                updateTime=#{parkingPlace.updateTime}
            </if>
        </set>
        where <if test="id"></if>id = #{parkingPlace.id} and map=#{map} and name=#{name}
    </update>

    <update id="updateInfraredPlace">
        update parking_place
        <set>
            <if test="placeVo.map != null">
                map=#{placeVo.map},
            </if>
            <if test="placeVo.state != null">
                state=#{placeVo.state},
            </if>
            <if test="placeVo.license != null and placeVo.license != '' and placeVo.license != 'null'">
                license=#{placeVo.license},
            </if>
            <if test="placeVo.license==null or 'null'.equals(placeVo.license)">
                license=null,
            </if>
            <if test="placeVo.addTime != null">
                addTime=#{placeVo.addTime},
            </if>
            <if test="placeVo.updateTime != null">
                updateTime=#{placeVo.updateTime}
            </if>
        </set>
        where id = #{placeVo.id}
    </update>

    <update id="updatePlaceTest">
        update parking_place_copy1
        <set>
            <if test="parkingPlace.name != null and parkingPlace.name != ''">
                name=#{parkingPlace.name},
            </if>
            <if test="parkingPlace.x != null">
                x=#{parkingPlace.x},
            </if>
            <if test="parkingPlace.y != null">
                y=#{parkingPlace.y},
            </if>
            <if test="parkingPlace.z != null">
                z=#{parkingPlace.z},
            </if>
            <if test="parkingPlace.map != null">
                map=#{parkingPlace.map},
            </if>
            <if test="parkingPlace.company != null">
                company=#{parkingPlace.company},
            </if>
            <if test="parkingPlace.floor != null">
                floor=#{parkingPlace.floor},
            </if>
            <if test="parkingPlace.state != null">
                state=#{parkingPlace.state},
            </if>
            <if test="parkingPlace.fid != null">
                fid=#{parkingPlace.fid},
            </if>
            <if test="parkingPlace.type != null">
                type=#{parkingPlace.type},
            </if>
                license=#{parkingPlace.license},
            <if test="parkingPlace.addTime != null">
                addTime=#{parkingPlace.addTime},
            </if>
            <if test="parkingPlace.entryTime != null">
                addTime=#{parkingPlace.entryTime}
            </if>
        </set>
        where id = #{parkingPlace.id}
    </update>

    <delete id="deleteCompany">
        DELETE
        from parking_company
        where parking_company.id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>
    <delete id="deletePlace">
        DELETE
        from parking_place
        where parking_place.id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>

    <update id="updatePlaces">
        update parking_place
        <set>
            company=#{newCompanyid}
        </set>
        <where>
            <if test="ids != null and ids.length != 0">
             parking_place.id in
                <foreach collection="ids" item="id" open="(" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
            <if test="oldCompanyid != null">
                and parking_place.company = #{oldCompanyid}
            </if>
        </where>
    </update>


    <select id="findFloorByMapid" resultType="java.lang.String">
        select floor
        from parking_place where 1 = 1
        <if test="map != null">
            and map = #{map}
        </if>
        group by floor
        order by floor
    </select>

    <select id="findByAllWeiTing" resultType="com.tgy.rtls.data.entity.park.WeiTing">
        select noparking.*, (select name from map_2d where map_2d.id = noparking.map) as mapName
        from noparking where 1 = 1
        <if test="id != null and id != ''">
            and id = #{id}
        </if>
        <if test="map != null and map != ''">
            and map = #{map}
        </if>
        <if test="state != null">
            and state = #{state}
        </if>
        <if test="license != null and license != ''">
            and license like concat('%', #{license}, '%')
        </if>
        <if test="start != null and start != '' and end != null and end != ''">
            and `time` between #{start} and #{end}
        </if>
    </select>

    <select id="findByAllWeiTing2" resultType="com.tgy.rtls.data.entity.park.WeiTing">
        select noparking.*, (select name from map_2d where map_2d.id = noparking.map) as mapName
        from noparking
                 left join map_2d m on m.id = noparking.map
        where 1 = 1
        <if test="id != null and id != ''">
            and id = #{id}
        </if>
        <if test="maps != null and maps != ''">
            and m.id in
            <foreach collection="maps" open="(" close=")" separator="," item="maps">
                #{maps}
            </foreach>
        </if>
        <if test="map != null and map != ''">
            and map = #{map}
        </if>
        <if test="state != null">
            and state = #{state}
        </if>
        <if test="license != null and license != ''">
            and license like concat('%', #{license}, '%')
        </if>
        <if test="start != null and start != '' and end != null and end != ''">
            and `time` between #{start} and #{end}
        </if>
    </select>

    <!--$var pageIndex=1-->
    <!--$var pageSize=1-->
    <select id="findByAllShangjia" resultType="com.tgy.rtls.data.entity.park.ShangJia">
        select *,
               (select name from map_2d where map_2d.id = map)                         as mapName,
               (select name from shangjia_type where shangjia.type = shangjia_type.id) as typeName
        from shangjia where 1 = 1
        <if test="name != null and name != ''">
            and name like concat('%', #{name}, '%')
        </if>
        <if test="instanceid != null and instanceid != ''">
            and instanceid = #{instanceid}
        </if>
        <if test="type != null">
            and type = #{type}
        </if>
        <if test="id != null and id != ''">
            and id = #{id}
        </if>
        <if test="map != null and map != ''">
            and map = #{map}
        </if>
        <if test="pageIndex != null">
            limit ${pageIndex},${pageSize}
        </if>
    </select>

    <!--$var pageIndex=1-->
    <!--$var pageSize=1-->
    <select id="findByAllShangjia2" resultType="com.tgy.rtls.data.entity.park.ShangJia">
        select shangjia.*,mrf.name floorName,
        (select mrf.name from map_relevance_floor mrf where mrf.map=shangjia.map and mrf.level=shangjia.floor) as floorName,
               (select name from map_2d where map_2d.id = shangjia.map)                         as mapName,
               m.mapKey,
               m.appName,
               m.fmapID,
               m.themeImg,
               (select name from shangjia_type where shangjia.type = shangjia_type.id) as typeName
        from shangjia
                 left join map_2d m on m.id = shangjia.map
        left join map_relevance_floor mrf on mrf.map = m.id AND mrf.level = shangjia.floor
        where 1 = 1
        <if test="name != null and name != ''">
            and shangjia.name like concat('%', #{name}, '%')
        </if>
        <if test="maps != null and maps != ''">
            and m.id in
            <foreach collection="maps" open="(" close=")" separator="," item="maps">
                #{maps}
            </foreach>
        </if>
        <if test="instanceid != null and instanceid != ''">
            and instanceid = #{instanceid}
        </if>
        <if test="floorName != null and floorName != ''">
            and mrf.name like concat('%',#{floorName},'%')
        </if>
        <if test="fid != null and fid != ''">
            and shangjia.fid=#{fid}
        </if>
        <if test="type != null">
            and shangjia.type = #{type}
        </if>
        <if test="id != null and id != ''">
            and shangjia.id = #{id}
        </if>
        <if test="map != null and map != ''">
            and shangjia.map = #{map}
        </if>
        ORDER BY shangjia.addTime DESC
        <if test="pageIndex != null">
            limit ${pageIndex},${pageSize}
        </if>
    </select>

    <select id="findShangjiaByName" resultType="com.tgy.rtls.data.entity.park.ShangJia">
        select *
        from shangjia where 1 = 1
        <if test="name != null and name != ''">
            and name = #{name}
        </if>
        <if test="map != null and map != ''">
            and map = #{map}
        </if>
    </select>
    <select id="findByAllShangjiaType" resultType="com.tgy.rtls.data.entity.park.ShangJiaType">
        select *
        from shangjia_type where 1 = 1
        <if test="instanceid != null and instanceid != ''">
            and instanceid = #{instanceid}
        </if>
        <if test="id != null and id != ''">
            and id = #{id}
        </if>
    </select>


    <insert id="addShangjia" keyProperty="id" useGeneratedKeys="true">
        insert into shangjia
        (map, name, content, time, owner, phone, address, floor, instanceid, x, y, z, fid, type, photo, photolocal,photo2,photolocal2,
         thumbnail, thumbnaillocal,object_type,icon_type)
            value (
                   #{shangJia.map}, #{shangJia.name}, #{shangJia.content}, #{shangJia.time},
                   #{shangJia.owner}, #{shangJia.phone}, #{shangJia.address}, #{shangJia.floor},
                   #{shangJia.instanceid}, #{shangJia.x}, #{shangJia.y}, #{shangJia.z},
                   #{shangJia.fid}, #{shangJia.type}, #{shangJia.photo}, #{shangJia.photolocal},#{shangJia.photo2}, #{shangJia.photolocal2},
                   #{shangJia.thumbnail}, #{shangJia.thumbnaillocal},#{shangJia.objectType},#{shangJia.iconType}
            )
    </insert>


    <update id="updateShangjia">
        update shangjia
        <set>
            <if test="shangJia.name != null and shangJia.name != ''">
                name=#{shangJia.name},
            </if>
            photo=#{shangJia.photo},
            photolocal=#{shangJia.photolocal},
            photo2=#{shangJia.photo2},
            photolocal2=#{shangJia.photolocal2},
            thumbnail=#{shangJia.thumbnail},
            thumbnaillocal=#{shangJia.thumbnaillocal},
            map=#{shangJia.map},
            content=#{shangJia.content},
            time=#{shangJia.time},
            owner=#{shangJia.owner},
            phone=#{shangJia.phone},
            address=#{shangJia.address},
            floor=#{shangJia.floor},
            instanceid=#{shangJia.instanceid},
            x=#{shangJia.x},
            y=#{shangJia.y},
            z=#{shangJia.z},
            fid=#{shangJia.fid},
            type=#{shangJia.type},
            object_type = #{shangJia.objectType},
            icon_type   = #{shangJia.iconType}
        </set>
        where id = #{shangJia.id}
    </update>
    <delete id="delShangjia">
        DELETE
        from shangjia
        where shangjia.id in
        <foreach collection="ids" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </delete>


    <select id="findPlace" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        select id,name,map,floor,x, y, z,company,state, license,fid,addTime,updateTime
        from parking_place
        where 1=1
        <if test="placeName != null and placeName != ''">
            and parking_place.name = #{placeName}
        </if>
        <if test="fid != null and fid != ''">
            and parking_place.fid = #{fid}
        </if>
        <if test="map != null and map != ''">
            and parking_place.map = #{map}
        </if>
        <if test="id != null">and parking_place.id=#{id}</if>
    </select>


    <select id="findExit" resultType="com.tgy.rtls.data.entity.park.ParkingExit">
        select *
        from parking_exit where 1 = 1
        <if test="fid != null and fid != ''">
            and parking_exit.fid = #{fid}
        </if>
        <if test="name != null and name != ''">
            and parking_exit.name = #{name}
        </if>
        <if test="map != null and map != ''">
            and parking_exit.map = #{map}
        </if>
        <if test="type != null">
            and parking_exit.type > 0
        </if>
    </select>

    <select id="findPlaceByMapAndName" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        select *, (select name from map_2d where map_2d.id = #{map}) mapName
        from parking_place where 1 = 1
        <if test="name != null">
            and parking_place.name = #{name}
        </if>
        <if test="fid != null">
            and parking_place.fid = #{fid}
        </if>
        and parking_place.map = #{map}
    </select>
    <select id="findCompanyByPhone" resultType="com.tgy.rtls.data.entity.park.ParkingCompany">
        select *
        from parking_company where 1 = 1
        <if test="phone != null">
            and phone = #{phone}
        </if>
    </select>
    <insert id="addLicensePos" keyProperty="id" useGeneratedKeys="true">
        insert into license_pos (license, map, x, y, z, fid, floor, userid, name,state)
            value (#{licensePos.license},
                   #{licensePos.map}, #{licensePos.x}, #{licensePos.y}, #{licensePos.z}, #{licensePos.fid},
                   #{licensePos.floor}, #{licensePos.userid}, #{licensePos.name},#{licensePos.state})
    </insert>
    <update id="updateLicensePos">
        update license_pos
        <set>
            x=#{licensePos.x},
            y=#{licensePos.y},
            z=#{licensePos.z},
            fid=#{licensePos.fid},
            floor=#{licensePos.floor},
            <if test="licensePos.updatetime != null">
                updatetime=#{licensePos.updatetime},
            </if>
            <if test="licensePos.state != null">
                state=#{licensePos.state},
            </if>
            name=#{licensePos.name}
        </set>
        where id = #{licensePos.id}
    </update>
    <select id="findLicensePosByLicenseAndMap" resultType="com.tgy.rtls.data.entity.park.LicensePos">
        select *
        from license_pos where 1 = 1
                           and map = #{map}
        <if test="license != null and license != ''">
            and license = #{license}
        </if>
        and userid = #{userid}
        limit 1
    </select>
    <select id="findLicensePosRecent" resultType="com.tgy.rtls.data.entity.park.LicensePos">
        select *
        from license_pos where 1 = 1
                           and map = #{map}
        <if test="license != null and license != ''">
            and license = #{license}
        </if>
        <if test="floor != null and floor != ''">
            and floor = #{floor}
        </if>
        and updatetime between #{start} and #{end}
    </select>
    <update id="updateExit">
        update parking_exit
        <set>
            x=#{parkingExit.x},
            y=#{parkingExit.y},
            z=#{parkingExit.z},
            fid=#{parkingExit.fid},
            floor=#{parkingExit.floor},
            access_status = #{parkingExit.accessStatus},
            type=#{parkingExit.type}
        </set>
        where id = #{parkingExit.id}
    </update>
    <insert id="addExit" keyProperty="id" useGeneratedKeys="true">
        insert into parking_exit (name, x, y, z, fid, map, floor,access_status,type)
            value (#{parkingExit.name},
                   #{parkingExit.x},
                   #{parkingExit.y},
                   #{parkingExit.z},
                   #{parkingExit.fid},
                   #{parkingExit.map},
                   #{parkingExit.floor},
                   #{parkingExit.accessStatus},
                   #{parkingExit.type}
            )
    </insert>

    <update id="updateCrossFloor">
        update parking_cross_floor
        <set>
            x=#{parkingCrossFloor.x},
            y=#{parkingCrossFloor.y},
            fid=#{parkingCrossFloor.fid},
            map=#{parkingCrossFloor.map},
            name=#{parkingCrossFloor.name}
        </set>
        where id = #{parkingCrossFloor.id}
    </update>
    <insert id="addCrossFloor" keyProperty="id" useGeneratedKeys="true">
        insert into parking_cross_floor (name, x, y, fid, map)
            value (#{parkingCrossFloor.name},
                   #{parkingCrossFloor.x},
                   #{parkingCrossFloor.y},
                   #{parkingCrossFloor.fid},
                   #{parkingCrossFloor.map}
            )
    </insert>
    <select id="findCrossFloor" resultType="com.tgy.rtls.data.entity.park.CrossLevelCorridor">
        select *
        from cross_level_corridor clc
        where clc.fid = #{fid}
          and clc.name = #{name}
          and clc.map = #{map}
    </select>

    <select id="getCrossFloorByMap" resultType="com.tgy.rtls.data.entity.park.CrossLevelCorridor">
        select *
        from cross_level_corridor clc
        where clc.map = #{map}
    </select>


    <select id="getSimulateTrail" resultType="com.tgy.rtls.data.entity.park.SimulateTrail">
        select simulate_trail.start_x as startX,
               simulate_trail.start_y as startY,
               simulate_trail.end_x   as endX,
               simulate_trail.end_y   as endY,
               simulate_trail.id,
               simulate_trail.name    as niceName,
               simulate_trail.floor   as floor
        from simulate_trail
        where simulate_trail.map = #{map}
    </select>

    <select id="getRealTrail" resultType="com.tgy.rtls.data.entity.park.RealTrail">
        select *
        from real_trail
        where real_trail.map = #{map}
    </select>


    <insert id="addFeeRecord" keyProperty="id" useGeneratedKeys="true">
        insert into fee_flow (license, map, enter_time, exit_time, enter_name, exit_name, fee, monthly_rent)
            value (#{fee.license},
                   #{fee.map},
                   #{fee.enterTime},
                   #{fee.exitTime},
                   #{fee.enterName},
                   #{fee.exitName},
                   #{fee.fee},
                   #{fee.monthlyRent}
            )
    </insert>
    <insert id="addFeeRecordTest" keyProperty="id" useGeneratedKeys="true">
        insert into fee_flow_test (license, map, exit_time, enter_name, exit_name, fee, monthly_rent)
            value (#{fee.license},
                   #{fee.map},
                   #{fee.exitTime},
                   #{fee.enterName},
                   #{fee.exitName},
                   #{fee.fee},
                   #{fee.monthlyRent}
            )
    </insert>

    <update id="updateFeeRecord">
        update fee_flow
        <set>
            fee=#{fee.fee},
            exit_time=#{fee.exitTime},
            exit_name=#{fee.exitName}
        </set>
        where id = #{fee.id}
    </update>
    <select id="findAllFee" resultType="com.tgy.rtls.data.entity.park.Fee">
        select fee_flow.*
        from fee_flow
    </select>

    <select id="findByCompanyMap" resultType="com.tgy.rtls.data.entity.map.Map_2d">
        SELECT m.id,
               m.NAME
        FROM map_2d m
                 LEFT JOIN parking_company pc ON m.id = pc.map
        WHERE pc.id = #{companyId}
    </select>
    <select id="getComByName" resultType="com.tgy.rtls.data.entity.park.ParkingCompany">
        select `name`
        from parking_company
        where `name` = #{companyName}
          and id != #{companyId}
    </select>

    <select id="getComByNameId" resultType="com.tgy.rtls.data.entity.park.ParkingCompany">
        select `name`
        from parking_company
        where `name` = #{companyName}
          and id = #{companyId}
        <if test="map != null">
            and map = #{map}
        </if>
    </select>
    <select id="getPlaceByName" resultType="com.tgy.rtls.data.entity.equip.Infrared">
        SELECT i.id    as infraredId,
               i.num,
               i.networkstate,
               i.power,
               i.map,
               i.status,
               i.place,
               i.rawProductId,
               i.addTime,
               pp.id   as placeId,
               pp.name as placeName,
               pp.fid
        FROM infrared i
                 LEFT JOIN parking_place pp ON pp.id = i.place
        WHERE pp.NAME = #{placeName}
        <if test="map != null">
            and i.map = #{map}
        </if>
    </select>

    <!--$var pageIndex=1-->
    <!--$var pageSize=1-->
    <select id="findByAllCompany2" resultType="com.tgy.rtls.data.entity.park.ParkingCompany">
        select parking_company.*,
               m.mapKey,
               m.appName,
               m.fmapID,
               m.themeImg,
        mrf.name floorName,
               (SELECT GROUP_CONCAT(NAME SEPARATOR ',')
                FROM parking_place
                WHERE parking_place.company = parking_company.id) AS
                                                                     places,
               m.name                                             as mapName
        from parking_company
                 left join map_2d m on m.id = parking_company.map
        left join map_relevance_floor mrf on mrf.map = m.id AND mrf.level = parking_company.floor
        where 1 = 1
        <if test="name != null and name != ''">
            and parking_company.name like concat('%', #{name}, '%')
        </if>
        <if test="maps != null and maps != ''">
            and m.id in
            <foreach collection="maps" open="(" close=")" separator="," item="maps">
                #{maps}
            </foreach>
        </if>
        <if test="instanceid != null and instanceid != ''">
            and m.instanceid = #{instanceid}
        </if>
        <if test="floorName != null and floorName != ''">
            and mrf.name like concat('%', #{floorName}, '%')
        </if>
        <if test="id != null and id != ''">
            and parking_company.id = #{id}
        </if>
        <if test="map != null and map != ''">
            and parking_company.map = #{map}
        </if>
        ORDER BY parking_company.addTime DESC
        <if test="pageIndex != null">
            limit ${pageIndex},${pageSize}
        </if>
    </select>

    <select id="findShangjiaPhone" resultType="com.tgy.rtls.data.entity.park.ShangJia">
        select *
        from shangjia
        where phone = #{phone}
        <if test="id != null and id != ''">
            and id != #{id}
        </if>
    </select>

    <select id="findShangjiaMapName" resultType="com.tgy.rtls.data.entity.park.ShangJia">
        select id,
               map,
               name,
               address,
               floor,
               x,
               y,
               type,
               fid,
               photo,
               photolocal,
               thumbnail,
               thumbnaillocal,
               addTime
        from shangjia
        where 1 = 1
        <if test="id != null">
            and shangjia.id = #{id}
        </if>
        and shangjia.name = #{name}
        and shangjia.map = #{mapId}
    </select>
    <select id="findShangjiaMapName1" resultType="com.tgy.rtls.data.entity.park.ShangJia">
        select *
        from shangjia
        where shangjia.name = #{name}
          and shangjia.map = #{mapId}
          and shangjia.id != #{id}
    </select>

    <select id="getAllCom" resultType="com.tgy.rtls.data.entity.park.ParkingCompany">
        select pc.id, pc.name
        from parking_company pc
                 left join map_2d m2d on pc.map = m2d.id
        where map = #{map}
    </select>

    <select id="getAllMap" resultMap="listComName">
        select m.id    as mapId,
               m.name  as mapName,
               pc.id   as comId,
               pc.name as comName
        from map_2d as m
                 left join parking_company pc on m.id = pc.map
        where 1 = 1
          and enable != 0
        <if test="mapIds != '' and mapIds != null">
            and m.id in
            <foreach collection="mapIds" open="(" close=")" separator="," item="mapIds">
                #{mapIds}
            </foreach>
        </if>
        order by pc.addTime desc
    </select>

    <update id="updatePlaceById">
        update parking_place
        <set>
            <if test="state != null">
                state=#{state},
            </if>
            <if test="license != null and license != '' and license != 'null'">
                license=#{license},
            </if>
            <if test="license==null or 'null'.equals(license)">
                license=null,
            </if>
            <if test="detectionException != null">
                detection_exception=#{detectionException},
            </if>
            <if test="exceptionTime != null">
                exception_time=#{exceptionTime},
            </if>
        </set>
        where map=#{map} and name=#{name}
    </update>

    <update id="updatePlaceByTest">
        update parking_place_copy1
        <set>
            <if test="state != null">
                state=#{state},
            </if>
            <if test="license != null and license != ''and license != 'null'">
                license=#{license},
            </if>
            <if test="'null'.equals(license)">
                license=null
            </if>
        </set>
            where id = #{placeId}
    </update>

    <select id="getCurrentInfrared" resultType="com.tgy.rtls.data.entity.map.Map_2d">
        select i.num, i.rawProductId, m.id, m.name
        from infrared i
                 left join map_2d m on m.id = i.map
        where i.num = #{num}
    </select>

    <select id="getCurrentInfraredMapName" resultType="com.tgy.rtls.data.entity.map.Map_2d">
        select m.id, m.name, m.addTime, pp.id, pp.name placeName,pc.name companyName
        from map_2d m
                 left join parking_place pp on m.id = pp.map
                 left join parking_company pc on pp.company = pc.id
        <where>
            <if test="placeId != null">
                pp.id = #{placeId}
            </if>
            <if test="map != null">
                and m.id = #{map}
            </if>
        </where>
        limit 1
    </select>

    <select id="getPlaceByFid" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        select id,
               name,
               x,
               y,
               z,
               map,
               company,
               floor,
               state,
               license,
               instanceid,
               fid,
               type,
               charge,
               role,
               addTime
        from parking_place
        where fid = #{fid}
    </select>

    <select id="getShangjiaMap" resultType="com.tgy.rtls.data.entity.park.ShangJia">
        select s.id,
               s.name,
               s.map,
               s.x,
               s.y,
               s.z,
               s.fid,
               s.photo,
               s.photolocal
        from shangjia s
        where s.id = #{id}
    </select>

    <select id="getPlaceById" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        select *
        from parking_place
        where id = #{placeId}
    </select>
    <select id="getPlaceById2" resultType="java.lang.Integer">
        select id
        from parking_place
        where 1=1 <if test="map!=null">and  map = #{map}</if> <if test="companyId!=null">and company=#{companyId}</if>
    </select>

    <select id="getPlaceByComId" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        select pp.id,
               pp.name,
               pp.x,
               pp.y,
               pp.z,
               pp.map,
               pp.company,
               pp.floor,
               pp.state,
               pp.fid,
               pp.type,
               pp.addTime
        from parking_place pp
                 left join parking_company pc on pc.id = pp.company
        where company = #{comId}
    </select>

    <update id="updatePlaceByComId">
        update parking_place
        set company = #{company}
        where id = #{id};
    </update>

    <select id="getComById" resultType="com.tgy.rtls.data.entity.park.ParkingCompany">
        select id,
               name,
               user,
               phone,
               x,
               y,
               map,
               floor,
               fid,
               addTime
        from parking_company
        where id = #{id}
    </select>

    <select id="getShangJiaById" resultType="com.tgy.rtls.data.entity.park.ShangJia">
        select s.id, s.name, s.map, s.x, s.y, s.z,s.fid,s.floor
        from shangjia s
        where s.id = #{id}
    </select>

    <select id="getComByxyf" resultType="com.tgy.rtls.data.entity.park.ParkingCompany">
        select id, name, x, y, map, floor, fid
        from parking_company
        where x = #{x}
          and y = #{y}
          and map = #{map}
          and floor = #{floor}
          and fid = #{fid}
        <if test="id != null">
            and id != #{id}
        </if>
    </select>

    <select id="getShangjiaByxyf" resultType="com.tgy.rtls.data.entity.park.ShangJia">
        select id, name, x, y, map, floor, fid
        from shangjia
        where x = #{x}
          and y = #{y}
          and map = #{map}
          and floor = #{floor}
          and fid = #{fid}
        <if test="id != null">
            and id != #{id}
        </if>
    </select>

    <select id="getPlaceByMapXY" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        SELECT *, SQRT(POWER(x - #{x}, 2) + POWER(y - #{y}, 2)) AS distance
        FROM parking_place
        WHERE state = 0
        <if test="map != null">
            and map = #{map}
        </if>
        <if test="floor != null and floor != ''">
            and floor = #{floor}
        </if>
        <if test="companyId != null and companyId != ''">
            and company = #{companyId}
        </if>
        ORDER BY distance ASC
    </select>

    <select id="getExclusiveAndFreePlaces" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        SELECT distinct pp.id,
                        pp.name,
                        pp.x,
                        pp.y,
                        pp.z,
                        pp.map,
                        pp.company,
                        pp.company,
                        pc.name companyName,
                        pp.floor,
                        pp.state,
                        pp.type,
                        pp.carbittype,
                        pp.fid,
                        pp.addTime,
                        r.recommelevel as placeLevel
        FROM parking_place pp
                left join parking_company pc on pp.company=pc.id
                 left join map_2d m2d on pp.map = m2d.id
                 left join recommConfigAreaPlace rap on pp.id = rap.placeId
                 left join recommConfigAreaVertexCoordinate rac on rap.areaId = rac.areaId
                 left join recommConfigAreaVertexCoordinateInfo rai on rai.id = rac.areaId
                 left join recommconfig r on r.id = rai.recommConfigId
        WHERE pp.state = 0 and pp.name !='lrr0112' and pp.instanceid is null and pp.carbittype is not null
        <if test="map != null and map != ''">
            and pp.map = #{map}
        </if>
        <if test="placeName != null and placeName != ''">
            and pp.name = #{placeName}
        </if>
        <if test="companyId == null and companyId != 12">
            and pp.company IS NULL
        </if>
        <!--偏好车位-->
<!--        <if test="preferenceCarBit != null">-->
<!--            and pp.type = #{preferenceCarBit}-->
<!--        </if>-->
        <!--不是VIP用户查普通车位-->
        <if test="preferenceCarBit == 0 or preferenceCarBit !=null">
            and pp.type =#{preferenceCarBit}
        </if>
<!--        <if test="">-->
<!--            and pp.type =#{preferenceCarBit}-->
<!--        </if>-->
        <!--是VIP用户查VIP车位-->
        <if test="isVip != null">
            and pp.carbittype = #{isVip}
        </if>

        <if test="companyId != null and companyId != 12">
            and pp.company = #{companyId}
        </if>
        <!--ORDER BY addTime DESC; &#45;&#45; 按添加时间的逆序排列结果-->
    </select>


    <select id="getOrdinaryPlaces" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        SELECT distinct pp.id,
                        pp.name,
                        pp.x,
                        pp.y,
                        pp.z,
                        pp.map,
                        pp.company,
                        pp.floor,
                        pp.state,
                        pp.type,
                        pp.carbittype,
                        pp.fid,
                        pp.addTime,
                        r.recommelevel as placeLevel
        FROM parking_place pp
                 left join map_2d m2d on pp.map = m2d.id
                 left join recommConfigAreaPlace rap on pp.id = rap.placeId
                 left join recommConfigAreaVertexCoordinate rac on rap.areaId = rac.areaId
                 left join recommConfigAreaVertexCoordinateInfo rai on rai.id = rac.areaId
                 left join recommconfig r on r.id = rai.recommConfigId
        where pp.state = 0 and pp.name !='lrr0112' and pp.instanceid is null and pp.carbittype is not null
        <if test="map != null">
            and pp.map = #{map}
        </if>
        <if test="placeId != null and placeId != ''">
        and pp.id NOT in
            <foreach collection="placeId" open="(" close=")" separator="," item="placeId">
                #{placeId}
            </foreach>
        </if>
<!--        <if test="companyId == null">-->
<!--            and company IS NULL-->
<!--        </if>-->
        <if test="companyId != null">
            and company = #{companyId}
        </if>
        <if test="placeType != null">
            and pp.type = #{placeType}
        </if>
        <if test="preferenceCarBit != null">
            and carbittype = #{preferenceCarBit}
        </if>
    </select>


    <select id="getPlaceByPlaceId" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        select id,
               name,
               x,
               y,
               z,
               map,
               config_way,
               company,
               floor,
               state,
               fid,
               addTime
        from parking_place
        where 1=1
        <if test="desc==null">
            <if test="placeId != null">
                and id = #{placeId}
            </if>
        </if>
        <if test="desc != null and desc != '' and desc.equals('update')">and id!=#{placeId}</if>
        <if test="name != null and name != ''">and name=#{name}</if>
        <if test="map != null">and map=#{map}</if>
    </select>



    <select id="getExit" resultType="com.tgy.rtls.data.entity.park.ParkingExit">
        select id,
               x,
               y,
               z,
               fid,
               name,
               map,
               floor
        from parking_exit
        where map = #{mapId}
          and name = #{name} and fid=#{fid}
    </select>

    <select id="getCurrentPlacesBindCompany" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        select id,
        name,
        x,
        y,
        z,
        map,
        company,
        floor,
        state,
        fid,
        carbittype,
        addTime
        from parking_place
        where 1=1 and parking_place.name !='lrr0112'
        <if test="mapId != null">
            and map = #{mapId}
        </if>
        <if test="placeName != null and placeName != ''">
            and name = #{placeName}
        </if>
        <if test="companyId != null and companyId != ''">
            and company = #{placeName}
        </if>
    </select>

    <delete id="deleteById">
        delete
        from
        where
    </delete>

    <select id="getPlaceByPlaceNames" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        select id,
        name,
        x,
        y,
        z,
        map,
        company,
        floor,
        state,
        fid,
        addTime
        from parking_place
        where 1=1
        <if test="mapId != null">
            and map = #{mapId}
        </if>
        <if test="placeName != null and placeName != ''">
            and name = #{placeName}
        </if>
        <if test="fid != null and fid != ''">
            and fid = #{fid}
        </if>
        <if test="companyId != null and companyId != ''">
            and company = #{placeName}
        </if>
    </select>

    <select id="getPlaceByPlaceNameList" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        select id,
        name,
        x,
        y,
        z,
        map,
        company,
        floor,
        state,
        fid,
        addTime,
        updateTime
        from parking_place
        where 1=1
        <if test="mapId != null">
            and map = #{mapId}
        </if>
        and name in
        <foreach collection="nameList" item="name" open="(" separator="," close=")">
            #{name}
        </foreach>
    </select>
    <select id="selectEmptyCountByPlaces" resultType="java.lang.Integer"  >
        select count(parking_place.id)
        from parking_place
        where parking_place.state = 0
        and  parking_place.id in
        <foreach collection="list" index="index" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </select>

    <update id="updateBatchById" parameterType="com.tgy.rtls.data.entity.park.PlaceVo">
        <foreach collection="placeVoList" separator=";" item="placeVo">
            update parking_place
            <set>
                <if test="placeVo.state != null">
                    state=#{placeVo.state},
                </if>
                <if test="placeVo.license != null and placeVo.license != ''and placeVo.license != 'null'">
                    license=#{placeVo.license},
                </if>
                <if test="placeVo.license==null or 'null'.equals(placeVo.license)">
                    license=null
                </if>
            </set>
            where id = #{placeVo.id}
        </foreach>
    </update>

    <select id="getInfraredByPlaceId" resultType="com.tgy.rtls.data.entity.equip.Infrared">
        select i.id,i.num,i.map,i.status,i.place,i.batteryTime,pp.name placeName,pp.license
        from infrared i
        left join parking_place pp on i.place = pp.id
        where 1=1
        <if test="num != null and num != ''">
            and  i.num !=#{num}
        </if>
        <if test="placeId!=null">
            and  i.place =#{placeId}
        </if>
    </select>

    <select id="getInfraredByTime" resultType="com.tgy.rtls.data.entity.equip.Infrared">
        select i.id,i.num,i.map,i.status,i.place,i.batteryTime,pp.name placeName,pp.license
        from infrared i
        left join parking_place pp on i.place = pp.id
        WHERE TIMESTAMPDIFF(MINUTE, i.batteryTime , NOW()) &lt; #{minute} and place = #{place}
    </select>

    <update id="updateShangJiaById">
        update shangjia
        set url=#{url}
        where id=#{id}
    </update>

    <select id="getPlaceById3" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        select id,map,floor,id, name, x, y,state
        from parking_place
        where 1=1 <if test="map!=null">and  map = #{map}</if> <if test="placeId!=null">and id=#{placeId}</if>
    </select>
    
    <update id="updateBatchById1">
        update parking_place
        <set>
            <if test="state != null">
                state=#{state},
            </if>
            <if test="license != null and license != ''and license != 'null'">
                license=#{license},
            </if>
            <if test="license==null or 'null'.equals(license)">
                license=null,
            </if>
            <if test="updateTime != null">
                updateTime=#{updateTime}
            </if>
        </set>
        where id = #{id}
    </update>


    <update id="updateBatchById2">
        update parking_place
        <set>
            <if test="state != null">
                state=#{state},
            </if>
            <if test="updateTime != null">
                updateTime=#{updateTime},
            </if>
            license=#{license},
            <if test="thirdPartyUpdateTime != null">
                <choose>
                    <when test="configWay != null and configWay == 2">
                        third_party_update_time=#{thirdPartyUpdateTime}
                    </when>
                </choose>
            </if>
        </set>
        where map=#{map} and name=#{name}
    </update>

    <select id="getPlaceListByPlaceId" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
        select id,name,x,y,z,map,config_way,company,floor,state,fid,addTime,updateTime,detection_exception,exception_time
        from parking_place
        where 1=1
        <if test="desc==null">
            <if test="placeId != null">
                and id = #{placeId}
            </if>
        </if>
        <if test="desc != null and desc != '' and desc.equals('update')">and id!=#{desc}</if>
        <if test="name != null and name != ''">and name=#{name}</if>
        <if test="map != null">and map=#{map}</if>
    </select>

    <select id="getPlaceDataById" resultType="com.tgy.rtls.data.entity.park.ParkingPlace">
            select id,name,fid,x,y,z,map,floor,state
            from parking_place
            where
            <if test="map != null and map != ''">
                map = #{map}
            </if>
            <if test="id != null">
                and  id = #{id}
            </if>
    </select>

    <select id="selectParkingPlaceList" resultType="com.tgy.rtls.data.entity.excel.ExcelDataVo">
        select pp.name,x as xCoordinate,y as yCoordinate,m2d.fmapID as fMapId,m2d.name as mapName,floor as englishName,fid as sid,pp.type as typeId
        from parking_place pp
        left join map_2d m2d on pp.map = m2d.id
        where 1=1
        <if test="mapId != null">
            and map = #{mapId}
        </if>
    </select>

    <update id="updatePlaceTests">
        update parking_place
        <set>
            <if test="now != null">
                third_party_update_time=#{now},
            </if>
        </set>
        where map=#{map} and config_way=2
    </update>
</mapper>