package com.tgy.rtls.location.netty;

import com.tgy.rtls.data.common.KafukaTopics;
import com.tgy.rtls.data.entity.equip.BsSyn;
import com.tgy.rtls.data.entity.update.BsfirmwareEntity;
import com.tgy.rtls.data.kafukaentity.BsPara;
import com.tgy.rtls.data.kafukaentity.FilePara;
import com.tgy.rtls.data.kafukaentity.TagSingleDis;
import com.tgy.rtls.data.mapper.update.BsfirmwareDao;
import com.tgy.rtls.data.service.equip.SubService;
import com.tgy.rtls.data.snowflake.AutoKey;
import com.tgy.rtls.location.check.ErrorCodeInf;
import com.tgy.rtls.location.check.Run;
import com.tgy.rtls.location.kafuka.KafukaSender;
import com.tgy.rtls.location.model.BsInf;
import com.tgy.rtls.location.model.Bs_tagDis;
import com.tgy.rtls.location.model.TagInf;
import com.tgy.rtls.location.struct.BsLocMode;
import net.sf.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.util.*;

import static com.tgy.rtls.location.Utils.Constant.*;

@Component
public class BsParaConfig {
    @Autowired
    SendData  sendData;
    @Autowired
    MapContainer mapContainer;
    @Autowired
    SubService subService;
    @Autowired
    AutoKey autoKey;
/*    @Autowired(required = false)
    BserrorcodetestDao bserrorcodetestDao;
    @Autowired(required = false)
    BserrorcodetestrecordDao bserrorcodetestrecordDao;*/
    @Autowired(required = false)
    KafukaSender kafukaSender;
    @Autowired
    TagParaConfig tagParaConfig;
    @Autowired(required = false)
    BsfirmwareDao bsfirmwareDao;
    Logger logger = LoggerFactory.getLogger(this.getClass());


    public boolean sendHeartData(Long bsid){
        BsInf bsInf = mapContainer.bsInf.get(bsid);
        if(bsInf==null){
            bsInf=new BsInf();
            mapContainer.bsInf.put(bsid,bsInf);
        }
        //int headid=(int )autoKey.getAutoId("");
        ByteBuffer buffer=ByteBuffer.allocate(12);
        buffer.putInt(bsInf.heartid++);
        buffer.putLong(new Date().getTime());


        return sendData.sendDate(bsid,CMD_BS_SENDHEART, buffer.array());


    }

    /**
     * 设置基站公司名
     * @param bsid
     * @param text
     * @return
     */
    public boolean setBsCompanyText(Long bsid,String text){
        text=text+"\0";
        byte[]  textBytes=text.getBytes();
        int textLen=textBytes.length;
        ByteBuffer buffer= ByteBuffer.allocate(textLen+2);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.putShort((short)textLen);
        buffer.put(textBytes);
       return sendData.sendDate(bsid,CMD_BS_TEXT,buffer.array());
    }

    /**
     * 基站升级
     * @param bsid
     * @return
     */
    public void getBsUpdate(Long bsid,ByteBuffer data){
       int tagid=data.getInt();//tagid
       byte fileType=data.get();
       int fileId=data.getInt();
        FilePara filePara=new FilePara();
       filePara.setFileType(fileType);
       filePara.setBsid(bsid);
       filePara.setMessageid(fileId);
        filePara.setDirection((short) 1);
        filePara.setProcess((short)100);
        filePara.setState((short)0);
       kafukaSender.send(KafukaTopics.FIlE_RES,filePara.toString());
        BsfirmwareEntity bs = bsfirmwareDao.findByBsid(bsid);
        if(bs==null) {
            bs=new BsfirmwareEntity();
            if(fileType==0)
                bs.setArmupdatestate(100);
            else if(fileType==3)
                bs.setUwbupdatestate(100);
            bsfirmwareDao.insertBsfirmwareEntity(bs);
        }
        else {
            if(fileType==0)
                bs.setArmupdatestate(100);
            else if(fileType==3)
                bs.setUwbupdatestate(100);
            bsfirmwareDao.update(bs);
        }

    }





    /**
     * 获取基站版本参数
     * @param bsid
     * @return
     */
    public boolean getBsVersionInf(Long bsid){
        String text="\0";
        byte[]  textBytes=text.getBytes();
        int textLen=textBytes.length;
        ByteBuffer buffer= ByteBuffer.allocate(textLen+2);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.putShort((short)textLen);
        buffer.put(textBytes);
        return sendData.sendDate(bsid,CMD_BS_VERSIONINF,buffer.array());
    }

    /**
     * 设置基站网络参数
     * @param bsid
     * @param ip
     * @param netmask
     * @param network
     * @param gateway
     * @return
     */
    public boolean setBsNetInf(Long bsid,String ip,String netmask,String network,String gateway,int ip_type){
        if(ip_type==0){
            ip="192.168.1.5";
            netmask="255.255.0.0";
            network="192.168.1.1";
            gateway="192.168.1.1";
        }else{
  /*          String[] ips=ip.split(".");
            netmask="255.255.0.0";
            network=ips[0]+"."+ips[1]+"."+ips[2]+"."+1;
            gateway=ips[0]+"."+ips[1]+"."+ips[2]+"."+1;*/
        }

        String ip1=ip+"\0";
        String netmask1=netmask+"\0";
        String network1=network+"\0";
        String gateway1=gateway+"\0";
        byte[] ip_byte=new byte[20];
        byte[] netmask_byte=new byte[20];
        byte[] network_byte=new byte[20];
        byte[] gateway_byte=new byte[20];
        byte[] ip_bytes=ip1.getBytes();
        byte[] netmask_bytes=netmask1.getBytes();
        byte[] network_bytes=network1.getBytes();
        byte[] gateway_bytes=gateway1.getBytes();
     for(int i=0;i<ip_bytes.length;i++){
         ip_byte[i]=ip_bytes[i];
     }
        for(int i=0;i<netmask_bytes.length;i++){
            netmask_byte[i]=netmask_bytes[i];
        }
        for(int i=0;i<network_bytes.length;i++){
            network_byte[i]=network_bytes[i];
        }
        for(int i=0;i<gateway_bytes.length;i++){
            gateway_byte[i]=gateway_bytes[i];
        }



        ByteBuffer buffer= ByteBuffer.allocate(20*4+4);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.putInt(ip_type);
        buffer.put(ip_byte);
        buffer.put(netmask_byte);
        buffer.put(network_byte);
        buffer.put(gateway_byte);

        return sendData.sendDate(bsid,CMD_BS_NET,buffer.array());
    }

    /**
     * 设置基站位置文字信息
     * @param bsid
     * @param text
     * @return
     */
    public boolean setBsLocationText(Long bsid,String text){
        text=text+"\0";
        byte[]  textBytes=text.getBytes();
        int textLen=textBytes.length;
        ByteBuffer buffer= ByteBuffer.allocate(textLen+2);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.putShort((short)textLen);
        buffer.put(textBytes);
        return sendData.sendDate(bsid,CMD_BS_LOCATION,buffer.array());
    }


    /**
     * 设置基站背景图
     * @param bsid
     * @param url
     * @param fileName
     * @return
     */
    public boolean setBsCompanyImg(Long bsid,String url,String fileName){
       String[] fileUrl=url.split("/");
        url=url+"\0";
       if(fileName==null||fileName.length()==0)
           fileName=fileUrl[fileUrl.length-1]+"\0";

    //    fileName=fileName+"\0";
        byte[] urlBytes=url.getBytes();
     //   byte[] fileNameBytes=fileName.getBytes();
        ByteBuffer buffer= ByteBuffer.allocate(urlBytes.length+2);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.putShort((short)(urlBytes.length));
        buffer.put(urlBytes);
     //   buffer.put(fileNameBytes);
        return sendData.sendDate(bsid,CMD_BS_IMG,buffer.array());
    }

    /**
     * 设置基站功率
     * @param bsid
     * @param gain
     * @param rw
     * @return
     */
    public boolean setBsPower(Long bsid,int gain,int  rw){
        ByteBuffer buffer= ByteBuffer.allocate(8);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.putInt(rw);
        buffer.putInt(gain);
        return sendData.sendDate(bsid,CMD_BS_POWER,buffer.array());
    }

    /**
     *
     * @param bsid
     * @param gegeral  0 reboot  1 syn 2 stop syn
     * @return
     */
    public boolean setBsGeneral(Long bsid,int gegeral){
        ByteBuffer buffer= ByteBuffer.allocate(4);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.putInt(gegeral);
        return sendData.sendDate(bsid,CMD_BS_GENERAL,buffer.array());
    }

    /**
     *
     * @param bsid
     * @param beepState  0 关闭  1 响
     * @param period   间隔单位ms
     * @return
     */
    public boolean setBsBeep(Long bsid,int beepState,int  period){
        ByteBuffer buffer= ByteBuffer.allocate(8);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.putInt(beepState);
        buffer.putInt(period);
        return sendData.sendDate(bsid,CMD_BS_BEEP,buffer.array());
    }

    /**
     *
     * @param bsid
     * @param mode
     * @param superFrame_interval
     * @param slot_duration
     * @param bsrssi
     * @param bsrange
     * @return
     */
    public boolean setTagModeViaBs(Long bsid,Byte mode,short superFrame_interval,short slot_duration,float bsrssi,float  bsrange){

        BsLocMode bsLocMode=new BsLocMode();
        ByteBuffer buffer=ByteBuffer.allocate(bsLocMode.size());
        buffer.order(ByteOrder.LITTLE_ENDIAN);

        //使用默认时区和语言环境获得一个日历。
        Calendar    rightNow    =    Calendar.getInstance();
        /*用Calendar的get(int field)方法返回给定日历字段的值。
        HOUR 用于 12 小时制时钟 (0 - 11)，HOUR_OF_DAY 用于 24 小时制时钟。*/
        int year = rightNow.get(Calendar.YEAR);
        int month = rightNow.get(Calendar.MONTH)+1; //第一个月从0开始，所以得到月份＋1
        int day = rightNow.get(rightNow.DAY_OF_MONTH);
        int hour12 = rightNow.get(rightNow.HOUR);
        int hour24 = rightNow.get(rightNow.HOUR_OF_DAY);
        int minute = rightNow.get(rightNow.MINUTE);
        int second = rightNow.get(rightNow.SECOND);
        int millisecond = rightNow.get(rightNow.MILLISECOND);

        buffer.put(mode);
        buffer.putShort(superFrame_interval);
        buffer.putShort(slot_duration);
        buffer.putFloat(bsrssi);
        buffer.putFloat(bsrange);
        buffer.put((byte) (year-2020));
        buffer.put((byte)(month));
        buffer.put((byte)(day));
        buffer.put((byte)(hour24));
        buffer.put((byte) (minute));
        buffer.put((byte)(second));
        buffer.putShort((short)(millisecond));

        return sendData.sendDate(bsid,CMD_BS_LOCPARA,buffer.array());
    }


    /**
     *
     * @param bsid
     * @param warning  0 关闭  1 响
     * @return
     */
    public boolean setBsWarning(Long bsid,BsPara warning){
        ByteBuffer buffer= ByteBuffer.allocate(2);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.put((byte)warning.getWarningState());
        buffer.put((byte)warning.getRelay_id());
        return sendData.sendDate(bsid,CMD_BS_WARNING,buffer.array());
    }



    /**
     *发送文件到基站，包括音频文件和固件，可由基站发送到标签
     * @param bsid
     * @param target 标签ID(0XFFFFFFFF代表广播，0代表该文件发送给基站)
     * @param fileType 文件类型 0：固件 1：音频文件
     * @param fileId  唯一文件id
     * @param fileUrl ascii编码 ‘\0’结尾
     * @param fileName  ascii编码 ‘\0’结尾
     * @return
     */
    public boolean sendBsFile(Integer instanceId,Long bsid,Integer target,byte fileType,int fileId,String fileUrl,String fileName){
          logger.error(instanceId+":"+bsid+":"+target+":"+fileType+":"+fileId+":"+fileUrl+":"+fileName);
             switch (target){
                 case -1:  //发送给所有标签

                     break;
                 case 0:   //发送给基站
                     target=0;
                     break;
                     default://发送给特定标签
                         if(bsid==-1)
                         bsid=getBsid((long)target);
                         break;
             }
              fileUrl=fileUrl+'\0';
              fileName=fileName+'\0';
              byte[] fileUrlBytes=fileUrl.getBytes();
              byte[] fileNameBytes=fileName.getBytes();
                ByteBuffer buffer= ByteBuffer.allocate(9+fileUrlBytes.length+fileNameBytes.length);
                buffer.order(ByteOrder.LITTLE_ENDIAN);
                if(target==-1)
                buffer.putInt(0xfffffff);
                else
                    buffer.putInt(target);
                buffer.put(fileType);
                buffer.putInt(fileId);
                buffer.put(fileUrlBytes);
                buffer.put(fileNameBytes);
                byte[] cmd=CMD_BS_SENDFILE;
                switch (fileType){
                    case 0:
                        cmd=CMD_BS_UPDATE;// ARM update
                        break;
                    case 1:
                        cmd=CMD_BS_SENDFILE;
                        break;
                    case 3:
                        cmd=CMD_BS_UPDATE;//MCU update
                        break;


                }
                if(bsid==-1) {
                 /*   Iterator bsiter = mapContainer.bsInf.entrySet().iterator();
                    while (bsiter.hasNext()) {
                        Map.Entry entry = (Map.Entry) bsiter.next();
                        BsInf bsInf = (BsInf) entry.getValue();
                        Long eachBsid = (Long) entry.getKey();
                        sendData.sendDate(eachBsid, CMD_BS_SENDFILE, buffer.array());
                    }*/
                    List<BsSyn> list = subService.findByAll(null,null,null, null, null, null, null, null, instanceId);
                    for (BsSyn bs:list
                         ) {

                        logger.info("- qun send file =via:" + bs.getNum()+":target:"+target+":url:"+fileUrl);
                        try {
                            sendData.sendDate(Long.valueOf(bs.getNum()), cmd, buffer.array());
                        }catch (Exception e){
                              e.printStackTrace();
                        }

                    }
                }else {
                    logger.info("-send file =via:" + bsid+":target:"+target+":url:"+fileUrl);
                    sendData.sendDate(bsid, cmd, buffer.array());
                }
        return true;
    }




    /**
     * 设置基站范围内标签的距离
     * @param bsid
     * @param tagid
     * @param dis  距离  单位米
     * @param lr  0：左侧 1：右侧
     * @param rssi
     * @param rssiFp
     */
    public void setCoalBs_TagDis(Long bsid,long tagid,float dis,byte lr,float rssi,float rssiFp,byte flag,String name,byte move,float volt){

        TagSingleDis tagSingleDis=new TagSingleDis();
        tagSingleDis.setDis(dis);
        tagSingleDis.setBsid(bsid);
        tagSingleDis.setTagid(tagid);
        tagSingleDis.setDis(dis);
        tagSingleDis.setLr(lr);
        tagSingleDis.setTime(new Date().getTime());
       // System.out.println(tagid+"测距基站"+bsid+":左右:"+lr+"---距离--"+dis);
        name=name+"\0";
        kafukaSender.send(KafukaTopics.TAG_RANGE,tagSingleDis.toString());
        ByteBuffer buffer = ByteBuffer.allocate(43);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.putInt((int)tagid);//tagid
        buffer.put(lr);//0 :左侧 1 ：右侧
        buffer.putFloat(dis);//距离
        buffer.putFloat(rssi);//信号强度
        buffer.putFloat(rssiFp);//首达径强度
        buffer.put(flag);//移除或者添加数据  0：移除 1： 添加
        buffer.put(move);//运动传感器  0：不动 1： 运动
        buffer.putFloat(volt);//电压
        byte[] name_bytes=new byte[20];
        byte[] name_byteso=name.getBytes();
        for(int i=0;i<name_byteso.length;i++){
            name_bytes[i]=name_byteso[i];
        }
        buffer.put(name_bytes);
        sendData.sendDate(bsid,CMD_BS_TAGDIS,buffer.array());

/*        TagLocation tagLocation=new TagLocation();
        tagLocation.setArea(bsid+"");
        tagLocation.setTagid(tagid);
        tagLocation.setX( (float)(Math.round(dis*100))/100);
        tagLocation.setY( lr);
        tagLocation.setZ( 0);
        tagLocation.setTime(new Date().getTime());
        tagLocation.setType((short) 0);
        tagLocation.setBsid(bsid);
        kafukaSender.send(KafukaTopics.TAG_LOCATION,tagLocation.toString());*/






    }

    /**
     *  基站测距
     * @param bsid
     * @param rangeId  测距id
     * @param type    设备类型，0 为基站   1为标签
     * @param targetId   测距目标id
     * @return
     */
    public boolean startBsRange(Long bsid,int rangeId,int type, Long targetId){
        ByteBuffer buffer= ByteBuffer.allocate(12);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.putInt(rangeId);
        buffer.putInt(type);
        buffer.putInt((int)targetId.longValue());
        return sendData.sendDate(bsid,CMD_BS_RANGE,buffer.array());
    }

    /**
     * 设置基站老化距离和老化时间
     * @param bsid
     * @param
     */
    public void setBsOldTimeAndDis(Long bsid ,float  dis,short time){
        ByteBuffer buffer= ByteBuffer.allocate(6);
        buffer.order(ByteOrder.LITTLE_ENDIAN);
        buffer.putFloat(dis);
        buffer.putShort(time);
        sendData.sendDate(bsid,CMD_BS_OLDTIMEDIS,buffer.array());
    }

    /**
     * 基站网络配置响应
     * @param bsid
     * @param res
     */
    public void getBsNetConfigRes(Long bsid ,byte res){
        BsPara bsPara=new BsPara();
        bsPara.setBsid(bsid);
        bsPara.setKeyOrder("net");
        if(res==0)
        kafukaSender.send(KafukaTopics.BS_CONTROLRES,bsPara.toString());
    }


    /**
     * 配置基站屏幕参数响应
     * @param bsid
     * @param buffer
     */
    public void getBsTagDisRes(Long bsid , ByteBuffer buffer){
        int tagid = buffer.getInt();
        byte flag = buffer.get();
        byte res=buffer.get();
        if(flag==0&&res==0){
            TagInf tagInf = mapContainer.tagInf.get((long) tagid);
            tagInf.screenCache.remove(bsid);
        }
    }

    /**
     * 向基站发送属于当前基站应该显示的标签
     * @param bsid
     */
    public void sendScreenCache(long bsid) {
        Iterator<Map.Entry<Long, TagInf>> tagIter = mapContainer.tagInf.entrySet().iterator();
        while (tagIter.hasNext()){
            Map.Entry<Long, TagInf> entry = tagIter.next();
            TagInf tagInf=entry.getValue();
            Iterator<Map.Entry<Long, Bs_tagDis>> bsIter = tagInf.screenCache.entrySet().iterator();
            while (bsIter.hasNext()){
                Map.Entry<Long, Bs_tagDis> bs_tagDis = bsIter.next();
                Long bs = bs_tagDis.getKey();
                Bs_tagDis disInf = bs_tagDis.getValue();
                if(bs.longValue()==bsid){
                    setCoalBs_TagDis(bsid,disInf.getTagid(),disInf.getDis(),disInf.getLr(),0,0,(byte) 1,disInf.name,disInf.move,disInf.getVolt());
                }
            }
        }

    }



    /**
     * 处理基站信息，修改数据库和发送卡夫卡信息
     * @param bsid
     * @param ver
     */
    public void getBsVersion(long bsid, String ver) {

        JSONObject json =  JSONObject.fromObject(ver);
        String value=json.getString("value");
        BsfirmwareEntity bsFirmWare=(BsfirmwareEntity)JSONObject.toBean(JSONObject.fromObject(value), BsfirmwareEntity.class);

        bsFirmWare.setBsid(bsid);
        BsfirmwareEntity bs = bsfirmwareDao.findByBsid(bsid);
        if(bs==null) {
                bsfirmwareDao.insertBsfirmwareEntity(bsFirmWare);
        }
        else {
            bsFirmWare.setId(bs.getId());
            bsFirmWare.setUwbupdatestate(bs.getUwbupdatestate());
            bsFirmWare.setArmupdatestate(bs.getArmupdatestate());
            bsfirmwareDao.update(bsFirmWare);
        }
    }


    /**
     * 测试基站误码率
     * @param bsid
     * @param bsPara
     */
    public void setRandomKey(Long bsid , BsPara bsPara){
        if(bsPara.getType()==1){
        ErrorCodeInf errorCodeInf=new ErrorCodeInf();
        errorCodeInf.messageid=bsPara.getMessageid();
        errorCodeInf.count=bsPara.getCount();
        errorCodeInf.bsid=bsid;
        errorCodeInf.interval=bsPara.getSendInterval();
        mapContainer.testid_inf.put(bsPara.getMessageid(),errorCodeInf);
        Thread th1=new Thread(new Run(errorCodeInf));
        errorCodeInf.th=th1;
        th1.start();
        }else{
            ErrorCodeInf error = mapContainer.testid_inf.get(bsPara.getMessageid());
      /*      BserrorcodetestrecordEntity res = bserrorcodetestDao.getByTagCheckId((long)bsPara.getMessageid());
            BserrorcodetestrecordEntity res1 = bserrorcodetestrecordDao.getByTagCheckid((long) bsPara.getMessageid());
            res1.setEnd(new Timestamp(new Date().getTime()));
            res1.setState((short)0);
            res1.setSendnum(res.getSendnum());
            res1.setReceivenum(res.getReceivenum());
            res1.setLost(res.getSendnum()-res.getReceivenum());
            res1.setErrornum(res.getErrornum());
            res1.setLostrate(res.getLost()/(double)res.getSendnum());
            res1.setErrorrate(res.getErrornum()/(double)res.getSendnum());*/
            error.stopFlag=true;
        }

    }

    /**
     * 判断是否是发送给特定标签的如果是，则需要选择标签附件的基站进行发送
     * @param target
     * @return
     */
  public long  getBsid(Long target){
        long bsid=-1;
      if(target!=null||target>0){
          TagInf tagInf = mapContainer.tagInf.get((long) target);
          if(tagInf!=null){
              bsid=tagInf.bsid;
          }
      }
      return bsid;
   }



}
